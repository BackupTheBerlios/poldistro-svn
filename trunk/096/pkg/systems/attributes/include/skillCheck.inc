// $Id$

/*===============================================================
* Current Version
* SKILLCHECK.INC - v1.0
* Updated 9/24/2005 6:52PM
*
* -- Revision v1.0 --
* Austin:
*  Created include file
===============================================================*/

use uo;
use os;
use util;
use cfgfile;

include ":attributes:attributes";
include ":attributes:advanceCheck";

const ADV_SKILL		:= 0x1;
const ADV_STATS		:= 0x2;
const ADV_ALL		:= ADV_SKILL+ADV_STATS; // 3
const ADV_DISABLE	:= 0x4; // 4 - because the default is ADV_ALL.

var g_skill_debug	:= 0;


/*
 * SkillCheck(mobile, attrib_name, difficulty, award_points, advance_flags)
 *
 * Purpose
 * Performs a skill check on an attribute and performs skill and stat advancements.
 * <= 0 means the skill check failed > 0 means it was successful.
 *
 * Parameters
 * mobile:		Mobile reference to do the skill check for.
 * attribute_name:	Name of the attribute to perform the check on.
 * award_diff:		Advanced as if the difficulty were this value - defaults to difficulty.
 * advance_flags:	Controls the turning on/off of stat and skill advancements for the check.
 *
 * Return value
 * Returns > 0 if the skill check was successful
 *
 */
function SkillCheck(mobile, attrib_name, difficulty, award_diff:=0, advance_flags:=ADV_ALL)
	if ( mobile.dead )
		SendSysMessage(mobile, "You can't use skills while dead.");
		return -100;
	elseif ( GetObjProperty(mobile, "DisableSkills") )
		SendSysMessage(mobile, "Your skills are disabled.");
		return -100;
	elseif ( GetObjProperty(mobile, "NoGains") )
		advance_flags := ADV_DISABLE;
	endif
	
	// Global skill-debug ( for SkillDbgMsg() )
	g_skill_debug := (GetObjProperty(mobile,"SkillDebug") != error);
	
	var effective_skill := AP_GetTrueSkill(mobile, attrib_name);
	
	// Difficulty checks
	if ( difficulty == -1 )
		// -1 = Check skill against its self.
		SkillDbgMsg(mobile, "Skill based check. Difficulty = -1");
	else
		difficulty := CDbl(difficulty);
	endif
	
	var pass_chance := CalcSuccessPercent(mobile, attrib_name, difficulty, effective_skill);
	var check_roll := RandomInt(100)+1;
	var pass_success := CInt(CDbl(pass_chance) - CDbl(check_roll))+1;
	// Ensure skill- and stat-gain if it's a -1 skillcheck
	// Do this AFTER the CalcSuccessPercent() call so '-1' isn't messed up
	if ( difficulty == -1 )
		difficulty := effective_skill;
	endif
	if ( !award_diff )
		award_diff := difficulty;
	endif
	
	SkillDbgMsg(mobile, "--");
	SkillDbgMsg(mobile, "Difficulty: "+CStr(difficulty)+"% (Award: "+CStr(award_diff)+")");
	SkillDbgMsg(mobile, "Effective Skill: "+CStr(effective_skill)+"%");
	SkillDbgMsg(mobile, "Success Chance: "+CStr(pass_chance)+"%");
	SkillDbgMsg(mobile, "Check Roll: "+CStr(check_roll));
	SkillDbgMsg(mobile, "Success: "+CStr(pass_success));
	SkillDbgMsg(mobile, "---");
	
	if ( !(advance_flags & ADV_SKILL) )
		SkillDbgMsg(mobile, "Skill advance disabled.");
	else
		//CheckSkillAdvance();
	endif
		
	if ( !(advance_flags & ADV_STATS) )
		SkillDbgMsg(mobile, "Stat advancement disabled.");
	else
		//AdvanceStatsForSkill();
	endif
	
	return pass_success;
endfunction

/*
 * CalcSuccessPerfect(mobile, attrib_name, difficulty, effective_skill)
 *
 * Purpose
 * Retrieves the percentage chance of success based on mobile's skill and the difficulty.
 *
 * Parameters
 *
 * Return value
 * Returns 1
 *
 */
function CalcSuccessPercent(mobile, attrib_name, difficulty, effective_skill)
	var settings := AP_GetSettingsCfgElem("Skills");
	if ( difficulty == -1 )
		var max_skill := AP_GetSkillCap(attrib_name);
		var neg1chance := CDbl(settings.MaxNeg1Chance);
		
		return CInt(neg1chance * effective_skill / max_skill);
	elseif ( (effective_skill + CDbl(settings.TooHard)) < difficulty )
		SkillDbgMsg(mobile, "Too hard.");
		return 0;
	elseif ( (effective_skill + Cdbl(settings.TooEasy)) > difficulty )
		SkillDbgMsg(mobile, "Too easy.");
		return 100;
	else
		return (50 + ((effective_skill - difficulty) * 2.5));
	endif
endfunction

/*
 * SkillDbgMsg(mobile, message)
 *
 * Purpose
 * Checks to see if it should send a skill debug message to a mobile.
 *
 * Parameters
 * mobile:	Mobile to send the messages to.
 * message:	Debug message.
 *
 * Return value
 * Returns 1
 *
 */
function SkillDbgMsg(mobile, message)
	if ( g_skill_debug )
		SendSysMessage(mobile, "Skill Debug: "+message);
	endif
	
	return 1;
endfunction

/*

function CheckSkillAdvance(mobile, attribute, award_points)
	if ( AP_CheckSkillCap(mobile, attribute) )
		return error{"errortext":="Skill cap for attribute '"+attribute+"' already reached."};
	elseif ( AP_CheckSkillCap(mobile) )
		return error{"errortext":="Total skill cap already reached."};
	endif
	
	var skill_amt := AP_GetTrueSkill(mobile, attribute);
	var free_gain := CDbl(AP_GetSettingsCfgElem("Skills").FreeGainUntil);
	if ( skill_amt < free_gain )
		//Increase 0.1 if < free gain
		AP_SetTrueSkill(mobile, attribute, skill_amt+0.1);
	endif
	
	if(points != 0)
      		points  := points * ((1000-temp_chance) / 1000);
    	endif
    	
	return 1;
endfunction
		
//Cdbl(Pow(2.0, Cint(basevalue/100))* 10.24);
*/

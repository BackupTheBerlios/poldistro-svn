use uo;
use os;
use util;
use cfgfile;

include ":poisonwatcher:poisons";

set_priority(5);


program poisonWatcher(who)
	//You can start this script with 
	//start_script("poisonwatcher", who);
	//or
	//start_script("poisonwatcher", {who});
	//
	if ( !who.IsA(POLCLASS_MOBILE) )
		who := who[1];
	endif
	
	SetObjProperty(who, "#PoisonPID", getpid()); // Keep making sure the mobile has this!

	var num_poisons := 0;
	var poisons := dictionary;

	StartUp(who, poisons, num_poisons);

	while ( 1 )
		SetObjProperty(who, "#PoisonPID", getpid()); // Keep making sure the mobile has this!
		SetObjProperty(who, "Poisons", poisons); // Update Poisons

		var event := wait_for_event(1);
		//Event will contain type, name, amount, and optionally level.

		who.SetPoisoned(num_poisons);

		if( event.type == EVENT_ADD_POISON )
			Add_Poison(who, event, poisons, num_poisons);
		elseif( event.type == EVENT_CURE_POISON )
			Cure_Poison(who, event, poisons, num_poisons);
		elseif( event.type == EVENT_CURE_SPECIFIC_POISON )
			Cure_Specific(who, event, poisons, num_poisons, 1);
		elseif( event.type == EVENT_DEAD || who.dead )
			Cure_Death(who, event, poisons, num_poisons);
		endif

		CheckPids(who, poisons, num_poisons);
		WearDown(who, poisons, num_poisons);

		Set_Critical(1);
		if( !ShouldRun(who, poisons.keys()) )
			who.SetPoisoned(0);
			LogOff(who, poisons, num_poisons);
			exit;
		endif
		Set_Critical(0);
	endwhile
endprogram

function StartUp(who, byref poisons, byref num_poisons)
	//This thing just started. Take in any poisons in the dictionary and start the scripts.
	var templist := GetObjProperty(who, "Poisons");
	EraseObjProperty(who, "Poisons");

	if( !templist )
		templist := dictionary;
		SetObjProperty(who, "Poisons", templist);
	endif

	foreach poison_name in (templist.keys())
		var event := struct;
		event.+name := poison_name;
		event.+amount := templist[poison_name].duration;
		event.+level := templist[poison_name].level;

		Add_Poison(who, event, poisons, num_poisons);
		sleepms(2);
	endforeach
endfunction

function LogOff(who, byref poisons, byref num_poisons)
	//On Logout, we want to save the status of poisons. Then stop the scripts.
	Set_Critical(1);
	SetObjProperty(who, "Poisons", poisons);

	foreach poison_name in ( poisons.keys() )
		KillPoison(poisons[poison_name].pid, poisons, poison_name);

		if( CfgInfo(poison_name).LogOutScript )
			who := SystemFindObjectBySerial(who.serial, SYSFIND_SEARCH_OFFLINE_MOBILES);
			var LogOutScript := start_script(CfgInfo(poison_name).LogOutScript, {who});
			if( LogOutScript.errortext )
				Print("PoisonWatcher LogoffScript: (" +  who.name + ") " + LogOutScript.errortext);
			endif
		endif
		sleepms(2);
	endforeach
	EraseObjProperty(who, "#PoisonPID");
	Set_Critical(0);
endfunction

function Cure_Death(who, byref event, byref poisons, byref num_poisons)
	//Cure poisons on death that dont continue afterwards.
	Set_Critical(1);
	foreach poison_name in ( poisons.keys() )
		if( !CfgInfo(poison_name).ContinueOnDeath )
			var event := struct;
			event.+name := poison_name;
			event.+amount := -1;

			Cure_Specific(who, event, poisons, num_poisons, 0);
		endif
		sleepms(2);
	endforeach
	Set_Critical(0);
endfunction

function CheckPids(who, byref poisons, byref num_poisons)
	//Remove poisons from the person's dictionary that are no longer running
	//if they are set to be considered cured when the script finishes.

	foreach poison_name in ( poisons.keys() )
		if( CfgInfo(poison_name).CureOnEnd )
			//Does it cure when the sub script stops?
			var script := GetProcess(poisons[poison_name].pid);
			if( !script )
				// Yeah its finished, lets clear it out!
				var event := struct;
				event.+name := poison_name;
				event.+amount := -1;

				Cure_Specific(who, event, poisons, num_poisons, 0);
			endif
		endif
		sleepms(2);
	endforeach
endfunction

function WearDown(who, byref poisons, byref num_poisons)
	//Run through each poison that is not set to NoEnd and wear it down 1 second.);
	foreach poison_name in ( poisons.keys() )
		if( !CfgInfo(poison_name).NoEnd ) //It does wear off
			if (poisons[poison_name].duration <= 1)
				KillPoison(poisons[poison_name].pid, poisons, poison_name);
				CleanupPoison(who, poison_name, num_poisons);
			else
				poisons[poison_name].duration := poisons[poison_name].duration-1;
			endif
		endif
		sleepms(2);
	endforeach
endfunction

function Add_Poison(who, byref event, byref poisons, byref num_poisons)
	//Check if a poison exists. If it does, increase its duration.
	//If it does not exist, add it to the list on the mobile. Start
	//the necessary script and store the name, duration and sub-script pid.
	if( !CfgInfo(event.name) )
		SendSysMessage(who, "Debug: You were infected with a poison not in poisons.cfg Poison Name -> [" + event.name + "] please page and report this.");
		return;
	endif

	var cumulative := CfgInfo(event.name).Cumulative;
	if( !poisons.Exists(event.name) )
		var script := CfgInfo(event.name).Script;
		script := start_script(script, {who, event.attacker, event.level});

		if( script.errortext )
			SendSysMessage(who, "Debug - Poison Script Add_Poison(): " + script.errortext);
			return;
		endif

		poisons[event.name] := struct;
		poisons[event.name].+duration := event.amount;
		poisons[event.name].+pid := script.pid;
		poisons[event.name].+level := event.level;
		
		var maxdur := CInt(CfgInfo(event.name).MaxDuration);
		if ( maxdur < poisons[event.name].duration )
			poisons[event.name].duration := maxdur;
		endif

		if( CfgInfo(event.name).IndicatePoison )
			num_poisons := num_poisons+1;
		endif
	else
		var lvl := poisons[event.name].level;
		var amt := CInt(event.amount);
		if (cumulative)
			if ((event.level) && lvl)
				amt := amt * ((event.level*1.0) / poisons[event.name].level);
				if (lvl >= event.level)
					poisons[event.name].duration := poisons[event.name].duration + amt;
				else
					KillPoison(poisons[event.name].pid, poisons, event.name);
					event.amt := amt;
					Add_Poison(who, event, poisons, num_poisons);
				endif
			else
				poisons[event.name].duration := poisons[event.name].duration + amt;
			endif
		else
			if ((event.level) && lvl)
				if ((lvl == event.level) && (amt > poisons[event.name].duration))
					poisons[event.name].duration := amt;
				elseif (event.level > lvl)
					KillPoison(poisons[event.name].pid, poisons, event.name);
					event.amt := amt;
					Add_Poison(who, event, poisons, num_poisons);
				endif					
			else
				if (amt > poisons[event.name].duration)
					poisons[event.name].duration := amt;
				endif
			endif
		endif
		var maxdur := CfgInfo(event.name).MaxDuration;
		if (maxdur < poisons[event.name].duration)
			poisons[event.name].duration := maxdur;
		endif
	endif
endfunction

function Cure_Poison(who, byref event, byref poisons, byref num_poisons)
	//Run through all curable poisons, and keep curing until were out
	//of curing power.

	foreach poison_name in ( poisons.keys() )
		var poisoncfg := CfgInfo(poison_name);
		if (!event.poisontype || (lower(event.poisontype) == lower(poisoncfg.Type)))
			if( !CfgInfo(poison_name).NoCure ) //Its curable
				event.name := poison_name;
				Cure_Specific(who, event, poisons, num_poisons, 1);
			endif

			if( event.amount <= 0 ) // All out of cure power
				break;
			endif
			sleepms(2);
		endif
	endforeach
endfunction

function Cure_Specific(who, byref event, byref poisons, byref num_poisons, check_virulence:=0)
	//Cures a specific poison by event.amount.
	//If -1 is sent for amount, it completely cures the poison.

	if( !CfgInfo(event.name) )
		SendSysMessage(who, "Debug: Something tried to cure a poison not in poisons.cfg Poison Name -> [" + event.name + "] please page and report this.");
		return;
	endif

	var cure_amount := event.amount;
	var level := event.level;
	if( poisons.Exists(event.name) )
		if( cure_amount == -1 )
			check_virulence:=0;
			cure_amount := poisons[event.name].duration + 1;
			level := 1;
		elseif( check_virulence )
			var virulence := CfgInfo(event.name).Virulence;
			if( !virulence )
				virulence := 1;
			endif
			
			/*
			var resist_skill := CfgInfo(event.name).ResistSkill;
			if( resist_skill )
				var i := virulence;
				for( i; i > 0; i:=i-1 )
					if( CheckSkill(who, resist_skill, -1, 100) > 0 )
						virulence := virulence - 1;
					endif
					sleepms(2);
				endfor
			endif
			*/

			cure_amount := CInt(event.amount / CfgInfo(event.name).Virulence);
		endif

		var allornothing := CfgInfo(event.name).AllOrNothingCure;
		if (allornothing)
			var chance := 0;
			if (level >= poisons[event.name].level)
				chance := 100;
			elseif ((poisons[event.name].level - level) == 1)
				chance := 50;
			elseif ((poisons[event.name].level - level) == 2)
				chance := 20;
			endif

			// If cure level is more than two levels lower than the poison level,
			// no chance to cure.

			if ((RandomInt(100)+1) <= chance)
				KillPoison(poisons[event.name].pid, poisons, event.name);
				CleanupPoison(who, event.name, num_poisons);
			endif

		else
			var multiply := (level*1.0)/(poisons[event.name].level);
			if (!multiply)
				multiply := 1;
			endif
			if( (multiply*cure_amount) >= poisons[event.name].duration )
				event.amount := event.amount - (poisons[event.name].duration / multiply);

				KillPoison(poisons[event.name].pid, poisons, event.name);

				CleanupPoison(who, event.name, num_poisons);
			else
				poisons[event.name].duration := poisons[event.name].duration - cure_amount*multiply;
				event.amount := 0;
			endif
		endif
	endif
endfunction

function ShouldRun( who, byref poison_keys )
	if ( Events_Waiting() >= 1 )
		return 1;
	elseif( who.connected )
		if( poison_keys.size() > 0 )
			return 1;
		endif
	endif

	return 0;
endfunction

function KillPoison(pid, byref poisons, event_name)
	var script := GetProcess(pid);
	script.kill();
	poisons.erase(event_name);
endfunction

function CleanupPoison(who, poison_name, byref num_poisons)
	if( CfgInfo(poison_name).IndicatePoison )
		num_poisons := num_poisons-1;
	endif

	if( CfgInfo(poison_name).CureMessage )
		SendSysMessage(who, CfgInfo(poison_name).CureMessage);
	endif

	if( CfgInfo(poison_name).CureScript )
		var script := start_script(CfgInfo(poison_name).CureScript, {who});
		if( script.errortext )
			SendSysMessage(who, "Debug - Cure Script CureSpecific(): " + script.errortext);
		endif
	endif
endfunction

/*
 * $Id
 *
 */
use uo;
use os;
use cfgfile;

include ":attributes:attributes";
include ":brainai:npcUtil";
include ":blood:blood";
include ":combat:settings";
include ":timedscripts:timedScripts";
include "include/client";
include "include/facings";
include "include/damage";

var item_cfg := ReadConfigFile(":*:itemdesc");

program MainHitScript(attacker, defender, weapon, armor, basedamage, rawdamage)
	//
	// Cheat checker
	//
	if ( attacker == defender )
		ApplyRawDamage(attacker, 1000);
	elseif ( attacker.hidden || defender.hidden )
		return 0;
	elseif ( !attacker.npctemplate )
		if ( !attacker.warmode )
			basedamage := CInt(basedamage/2);
			rawdamage := CInt(rawdamage/2);
		endif
	endif
	
	FacingChecks(attacker, defender);	
	PlayHitSounds(defender);
	SkillChecks(attacker, defender, weapon, rawdamage);
	ArrowRecovery(defender, weapon);
	ParryCheck(attacker, defender, rawdamage);
	WearDownWeapon(attacker, weapon);
	WearDownArmor(defender, armor, rawdamage);
	DamageInfo(attacker, defender, basedamage, rawdamage);
	WeaponHitScripts(attacker, defender, weapon, armor, basedamage, rawdamage);
	ArmorHitScripts(attacker, defender, weapon, armor, basedamage, rawdamage);
	//PoisonChecks(attacker, defender, weapon, armor, basedamage, rawdamage);
	
	var hostiles := ListHostiles(defender, 1);
	rawdamage := rawdamage+CInt(hostiles.size()/2);
	hostiles := 0;
	//
	// Apply the damage to the defender
	// Base = prearmor
	// Raw = post armor
	//
	if ( rawdamage > 0 )
		ApplyRawDamageEX(defender, CInt(rawdamage), DMG_DEFAULT);
		MakeBleed(defender);
	endif
endprogram

function FacingChecks(attacker, defender)
	if ( !CS_GetSettingsCfgElem("General").ForceFacing )
		return 0;
	endif
	
	var facing := GetFacing(attacker.x, attacker.y, defender.x, defender.y);
	if ( attacker.facing != facing )
		attacker.facing := facing;
	endif
	
	return 1;
endfunction

function PlayHitSounds(defender)
	if ( defender.IsA(POLCLASS_NPC) )
		var damaged_sound := NPC_GetNPCConfig(defender).DamagedSound;
		if ( damaged_sound )
			PlaySoundEffect(defender, damaged_sound);
		endif
	endif
endfunction

function SkillChecks(attacker, defender, weapon, rawdamage)
	var can_gain := 0;
	var next_gain := CInt(GetObjProperty(attacker, "#CS_GainTime"));
	if ( ReadGameClock() >= next_gain )
		if ( CS_GetSettingsCfgElem("General").PvPGains )
			can_gain := 1;
		elseif ( defender.IsA(POLCLASS_NPC) )
			can_gain := 1;
		endif
	endif
	
	if ( can_gain )
		var gain_wait := CInt(CS_GetSettingsCfgElem("General").GainWait);
		SetObjProperty(attacker, "#CS_GainTime", ReadGameClock()+gain_wait);
		if ( rawdamage > 0 )
			SkillCheck(attacker, weapon.attribute, -1);
			SkillCheck(attacker, "Tactics", -1);
		endif
	endif
endfunction

function ArrowRecovery(defender, weapon)
	if ( defender.IsA(POLCLASS_NPC) && defender.backpack )
		var chance := CInt(CS_GetSettingsCfgElem("Archery").RecoverChance);
		if ( RandomDiceRoll("1d100") <= chance )
			item_cfg := item_cfg[weapon.objtype];
			if ( item_cfg.Projectile )
				CreateItemInBackPack(defender, item_cfg.ProjectileType, 1);
			endif
		endif
	endif
endfunction

function WearDownArmor(defender, armor, rawdamage)
	if ( armor )
		var armr_elem := CS_GetSettingsCfgElem("Armor");
		
		// Turn into a percentage.
		var dmg_to_wear := CDbl(CDbl(armr_elem.DmgToWear) * CDbl(armor.hp)) / 100.0;
				
		if ( CDbl(rawdamage) > dmg_to_wear )
			if ( RandomDiceRoll("1d100") <= armr_elem.WearChance )
				SendSysMessage(defender, armor.desc+" takes some damage.");
				armor.quality := armor.quality * CDbl(armr_elem.WearRate);
				if ( armor.quality <= 0.1 )
					SendSysMessage(defender, armor.desc+" has been destroyed.");
					DestroyItem(armor);
				elseif ( armor.hp > armor.maxhp )
					armor.hp := armor.maxhp;
				endif
			endif
		endif
	endif
	
	return 1;
endfunction

function WearDownWeapon(attacker, weapon)
	if ( weapon.IsA(POLCLASS_WEAPON) )
		if ( weapon.objtype == 0xF020 )
			return 1;
		else
			var wpn_elem := CS_GetSettingsCfgElem("Weapons");
			if ( RandomDiceRoll("1d100") <= CInt(wpn_elem.WearChance) )
				weapon.quality := weapon.quality * CDbl(wpn_elem.WearRate);
				if ( weapon.quality <= 0.1 )
					SendSysMessage(attacker, weapon.desc+" breaks.");
					MoveObjectToLocation(weapon, 1, 1, 1, attacker.realm, MOVEOBJECT_FORCELOCATION);
					DestroyItem(weapon);
				elseif ( weapon.hp > weapon.maxhp )
					weapon.hp := weapon.maxhp;
				endif
			endif
			return 1;
		endif
	else
		SendSysMessage(attacker, "An attack without a weapon?! Waaaa! That shouldnt be.");
		return 0;
	endif
endfunction

function DamageInfo(attacker, defender, basedamage, rawdamage)
	if ( attacker.cmdlevel )
		PrintTextAbovePrivate(attacker, "Rawdamage:"+rawdamage+"  Base:"+basedamage, attacker);
	endif
	if ( defender.cmdlevel )
		PrintTextAbovePrivate(attacker, "Rawdamage:"+rawdamage+"  Base:"+basedamage, defender);
	endif
endfunction

function WeaponHitScripts(attacker, defender, weapon, armor, basedamage, rawdamage)
	var weapon_scripts := array;
	if ( weapon.objtype == 0xF020 ) // Intrinsic fist
		weapon_scripts := GetObjProperty(attacker, "HitScripts");
	elseif ( weapon.IsA(POLCLASS_WEAPON) )
		weapon_scripts := GetObjProperty(weapon, "HitScripts");
	endif
	
	foreach hitscript in weapon_scripts
		var script := start_script(hitscript, {attacker, defender, weapon, armor, basedamage, rawdamage});
		if ( !script || script.errortext )
			SendSysMessage(attacker, "*Attacker* Weapon script error starting ["+hitscript+"] :" + script.errortext);
			SendSysMessage(defender, "*Attacker* Weapon script error starting ["+hitscript+"] :" + script.errortext);
		endif
		sleepms(2);
	endforeach
	
	return 1;
endfunction

function ArmorHitScripts(attacker, defender, weapon, armor, basedamage, rawdamage)
	var body_scripts := GetObjProperty(defender, "ArmorHitScripts");
	var armor_scripts := GetObjProperty(armor, "ArmorHitScripts");
	if ( !body_scripts )
		body_scripts := array{};
	endif
	if ( !armor_scripts )
		armor_scripts := array{};
	endif
	
	armor_scripts := armor_scripts + body_scripts;
	
	foreach hitscript in armor_scripts
		var script := start_script(hitscript, {attacker, defender, weapon, armor, basedamage, rawdamage});
		if ( script.errortext )
			SendSysMessage(attacker, "*Defender* armor script error starting ["+hitscript+"] :" + script.errortext);
			SendSysMessage(defender, "*Defender* armor script error starting ["+hitscript+"] :" + script.errortext);
		endif
		sleepms(2);
	endforeach
	
	return 1;
endfunction

/*
function PoisonChecks(attacker, defender, weapon, armor, basedamage, rawdamage)
	if ( rawdamage < 1 )
		return 0;
	endif
	
	// Unsure how poisoned weapon CProps will look yet.
endfunction
*/

//
// Returns 1 on successful parry.
//
function ParryCheck(attacker, defender, byref rawdamage)
	var shield := GetEquipmentByLayer(defender, LAYER_HAND2);
	if ( !shield.ISA(POLCLASS_ARMOR) )
		shield := GetEquipmentByLayer(defender, LAYER_HAND1);
	endif
	
	if ( !shield.IsA(POLCLASS_ARMOR) )
		return 0;
	endif
	
	var parry_elem := CS_GetSettingsCfgElem("Parry");
	var divisor := CDbl(parry_elem.ParryDivisor);
	var roll := CDbl(parry_elem.ParryRoll);
	var parry_chance := CDbl(AP_GetSkill(attacker, "Tactics")) / divisor;
	
	if ( RandomFloat(roll) > parry_chance ) // Failed
		return 0;
	endif
	
	//PerformAction(defender, ANIM_TWIST_DODGE);
	SendSysMessage(defender, "You deflect some damage using your shield.");
	var decrease := RandomInt(shield.ar)+1;
	var new_dmg := rawdamage - decrease;
	
	if ( attacker.cmdlevel )
		PrintTextAbovePrivate(defender, "Parry! Lowering damage from ["+rawdamage+"] to ["+new_dmg+"]", attacker);
	endif
	if ( defender.cmdlevel )
		PrintTextAbovePrivate(defender, "Parry! Lowering damage from ["+rawdamage+"] to ["+new_dmg+"]", defender);
	endif
	
	rawdamage := new_dmg;
		
	if ( rawdamage > CInt(0.15*shield.hp) )
		SendSysMessage(defender, shield.desc+" takes some damage.");
		shield.quality := shield.quality * CDbl(CS_GetSettingsCfgElem("Parry").WearRate);
		if ( shield.quality <= 0.1 )
			SendSysMessage(defender, shield.desc+" has been destroyed.");
			MoveObjectToLocation(shield, 1, 1, 1, defender.realm, MOVEOBJECT_FORCELOCATION);
			DestroyItem(shield);
		elseif ( shield.hp > shield.maxhp )
			shield.hp := shield.maxhp;
		endif
	endif
	return 1;
endfunction

use uo;
use os;

include ":gumps:include/old/old-gumps";
include "include/client";
include "include/gumpUtil";

var pid, proc, item, newtype, newamt, respawn, apply, cancel;

program GuardNodeManager(who, itm)
  detach();
  item := itm;
  pid  := GetObjProperty(item, "#Pid");
  proc := GetProcess(pid);
  if(!proc)
    SendSysMessage(who, "That guard node is not responding.");
    return;
  endif
  GFInitGump(0, 0);
  GFPage(0);
  GFResizePic(  0,   0, 5120, 440, 300);
  GFResizePic( 10,  10, 5054, 420, 250);
  GFTextLine(132, 17, 0, "Guard Node Interface");
  GFTextLine(130, 15, COLOR_YELLOW, "Guard Node Interface");
  var type := GetObjProperty(item, "Type");
  if(!type)
    type := "townguard";
    SetObjProperty(item, "Type", "townguard");
  endif
  var amt := GetObjProperty(item, "Amount");
  if(!amt)
    amt := 1;
    SetObjProperty(item, "Amount", 1);
  endif
  GFTextLine( 20,  50, COLOR_GREEN, "Guard Set Type:");
  GFTextLine( 20,  80, COLOR_GREEN, "Guard Set Amount:");
  GFTextLine(255,  80, COLOR_GREEN, "Current:");
  var npclist := GetObjProperty(item, "NpcList");
  var current := 0;
  var holder := array;
  foreach thing in npclist
    if(SystemFindObjectBySerial(thing))
      current := current + 1;
      holder.append(thing);
    endif
  endforeach
  SetObjProperty(item, "NpcList", holder);
  if(current == amt)
    GFTextLine(350,  80, COLOR_BLUE,   current+"/"+amt);
  elseif(current == 0)
    GFTextLine(350,  80, COLOR_RED,    current+"/"+amt);
  else
    GFTextLine(350,  80, COLOR_YELLOW, current+"/"+amt);
  endif
  GFGumpPic(171, 50, 2440);
  GFGumpPic(171, 80, 2444);
  newtype     := GFTextEntry(178,  50, 200,  30, COLOR_GREEN, type);
  newamt      := GFTextEntry(178,  80, 200,  30, COLOR_GREEN, amt);
  apply   := GFButtonID( 20, 270, G_YELLOW_OVAL_APPLY_0, G_YELLOW_OVAL_APPLY_1, 1);
  cancel  := GFButtonID(100, 270, G_RED_OVAL_CANCEL_0, G_RED_OVAL_CANCEL_1, 1);
  GetStatus(item, respawn);
  var retkey  := GFSendGump(who);
  if((retkey[cancel.keyid]) or (retkey[0] == 0))
    SendSysMessage(who, "Cancelled.");
  elseif(retkey[apply.keyid])
    ResetGuardNode(item, retkey);
  endif
endprogram

function GetStatus(item, byref respawn)
  var status := GetObjProperty(item, "Status");
  var color, txt;
    case(status)
      "on":      color := COLOR_GREEN; txt := "Guard Node Enabled";
                 GFSetRadioGroup(1);
                 GFRadioButton(20, 150, 210, 211, 1, 200);
                 GFRadioButton(20, 175, 210, 211, 0, 201);
      "off":     color := COLOR_RED; txt := "Guard Node Disabled";
                 GFSetRadioGroup(1);
                 GFRadioButton(20, 150, 210, 211, 0, 200);
                 GFRadioButton(20, 175, 210, 211, 1, 201);
      default:   color := COLOR_GREEN; txt := "Guard Node Enabled";
                 SetObjProperty(item, "Status", "on");
                 GFSetRadioGroup(1);
                 GFRadioButton(20, 150, 210, 211, 1, 200);
                 GFRadioButton(20, 175, 210, 211, 0, 201);
    endcase
  var cs := GetObjProperty(item, "#wait");
  if(cs == 1)
    color := COLOR_YELLOW;
    txt := "Guard Node Is Waiting To Initialize";
  elseif(cs == 2)
    color := COLOR_YELLOW;
    txt := "Guard Nodes Are Disabled Globally";
  elseif(status != "off")
    respawn := GFCheckBox(  20, 120, 208, 209, 0, 300);
    GFTextLine( 50, 120, COLOR_GREEN, "Respawn Guards");
  endif
  GFTextMid(150, 270, 300, color, txt);
  GFTextLine(60, 150, COLOR_GREEN, "Enable Node");
  GFTextLine(60, 175, COLOR_GREEN, "Disable Node");
endfunction

function ResetGuardNode(item, ret)
  var rsp := 0;
  newtype := SplitWords(ret[newtype.keyid])[2];
  if(newtype != GetObjProperty(item, "Type"))
    SetObjProperty(item, "Type", newtype);
    rsp := 1;
  endif
  newamt := Cint(SplitWords(ret[newamt.keyid])[2]);
  if(newamt != GetObjProperty(item, "Amount"))
    SetObjProperty(item, "Amount", newamt);
    rsp := 1;
  endif
  if((ret[200]) and (GetObjProperty(item, "Status") == "off"))
    rsp := 1;
    SetObjProperty(item, "Status", "on");
  elseif(ret[201])
    SetObjProperty(item, "Status", "off");
    rsp := 1;
  endif
  if((ret[respawn.keyid]) or (rsp == 1))
    if(ret[200])
      SendRespawnEvent();
    else
      SendDespawnEvent();
    endif
  endif
endfunction

function SendRespawnEvent()
  var ev := struct;
  ev.+type := "Respawn";
  proc.SendEvent(ev);
endfunction

function SendDespawnEvent()
  var ev := struct;
  ev.+type := "Despawn";
  proc.SendEvent(ev);
endfunction
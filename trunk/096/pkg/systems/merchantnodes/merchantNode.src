use uo;
use os;

include ":gumps:include/old/old-gumps";
include "include/client";
include "include/OLD/mrcSpawn";

var pid, proc, item, restock, respawn, apply, cancel, page := 0, chk := 0, sy := 60, type;

program MerchantNodeManager(who, itm)
  detach();
  item := itm;
  pid  := GetObjProperty(item, "#Pid");
  proc := GetProcess(pid);
  if(!proc)
    SendSysMessage(who, "That merchant node is not responding.");
    return;
  endif
  OldGFInitGump(0, 0);
  OldGFPage(page);
  page := page + 1;
  OldGFPage(page);
  OldGFResizePic(  0,   0, 5120, 540, 400);
  OldGFResizePic( 10,  10, 5054, 520, 350);
  var template := GetObjProperty(item, "Template");
  if(!template)
    template := 1;
    SetObjProperty(item, "Template", 1);
  endif
  if(template == 1)
    OldGFTextLine(232, 17, 0, "Merchant Node Interface");
    OldGFTextLine(230, 15, 0x35, "Merchant Node Interface");
  else
    OldGFTextLine(232, 17, 0, "Banker Node Interface");
    OldGFTextLine(230, 15, 0x35, "Banker Node Interface");
  endif
  type := GetObjProperty(item, "Type");
  if(!type)
    type := array;
    SetObjProperty(item, "Type", type);
  endif
  var amt := len(type);
  OldGFTextLine( 20, 40, COLOR_BLUE, "Type");
  OldGFTextLine(150, 40, COLOR_BLUE, "X");
  OldGFTextLine(210, 40, COLOR_BLUE, "Y");
  OldGFTextLine(270, 40, COLOR_BLUE, "Z");
  OldGFTextLine(310, 40, COLOR_BLUE, "Enable");
  OldGFTextLine(360, 40, COLOR_BLUE, "Delete");
  OldGFTextLine(420, 40, COLOR_BLUE, "Rebuild Stock");
  FillInPageData();
  if(len(type) < 10)
    OldGFTextLine(40, sy, 0x35, "Create a new merchant here?   (negates all other choices)");
    OldGFButtonID(20, sy, 210, 211, 1, sy);
  endif
  OldGFTextLine( 20, 20, COLOR_GREEN, "Current:");
  var npclist := GetObjProperty(item, "NpcList");
  var current := 0;
  var holder := array;
  foreach thing in npclist
    if(SystemFindObjectBySerial(Cint(thing)))
      current := current + 1;
      holder.append(thing);
    endif
  endforeach
  SetObjProperty(item, "NpcList", holder);
  if(current == amt)
    OldGFTextLine(90, 20, COLOR_BLUE,   current+"/"+amt);
  elseif(current == 0)
    OldGFTextLine(90, 20, COLOR_RED,    current+"/"+amt);
  else
    OldGFTextLine(90, 20, 0x35, current+"/"+amt);
  endif
  apply   := OldGFButtonID( 20, 370, 2124, 2123, 1);
  cancel  := OldGFButtonID(100, 370, 2121, 2120, 1, 0);
  GetStatus(item);
  var retkey  := OldGFSendGump(who);
  if((retkey[cancel.keyid]) or (retkey[0] == 1))
    SendSysMessage(who, "Cancelled", 3, 40);
  elseif(retkey[apply.keyid])
    ResetMerchantNode(who, retkey);
  else
    var ret := retkey[0];
    if(ret < 500)
      ret := Cint((ret - 35) / 25);
      var holder := array;
      foreach thing in type
        if(thing != type[ret])
          holder.append(thing);
        endif
      endforeach
      type := holder;
      SetObjProperty(item, "Type", type);
      holder := array;
      var tmparray := array;
      var newtmp := RequestInput(who, item, "What template would you like to spawn?");
      if(!newtmp)
        SendSysMessage(who, "Cancelled.", 3, 40);
        return;
      else
        tmparray.append(newtmp);
      endif
      SendSysMessage(who, "Target the location where you would like the npc to appear.");
      var trg := TargetCoordinates(who);
      if(!trg)
        SendSysMessage(who, "Cancelled.", 3, 40);
        return;
      else
        tmparray.append(array(trg.x, trg.y, trg.z));
      endif
      if(template == 1)
        var merctype := FindMerchantType(newtmp);
        if(!merctype)
          SendSysMessage(who, "That is an invalid template.", 3, 40);
          return;
        endif
        create_node_merc(merctype, merctype + " " + trg.x + " " + trg.y + " " + trg.z);
      endif
      tmparray.append(1);
      holder.append(tmparray);
      foreach thing in type
        holder.append(thing);
      endforeach
      SetObjProperty(item, "Type", holder);
    endif
  endif
endprogram

function FillInPageData()
  var i := 1;
  foreach current in type
    var template := current[1];
    var x        := current[2][1];
    var y        := current[2][2];
    var z        := current[2][3];
    var status   := current[3];
    var color    := COLOR_GREEN;
    if(!status)
      color := COLOR_RED;
    endif
    OldGFTextLine( 20, sy, color, template);
    OldGFTextLine(150, sy, color, x);
    OldGFTextLine(210, sy, color, y);
    OldGFTextLine(270, sy, color, z);
    OldGFCheckBox(320, sy, 208, 209, 0, 5000+i);
    OldGFCheckBox(370, sy, 208, 209, 0, 6000+i);
    OldGFCheckBox(460, sy, 208, 209, 0, 7000+i);
    sy := sy + 25;
    i := i + 1;
  endforeach
endfunction

function GetStatus(item)
  var status := GetObjProperty(item, "Status");
  var color, txt;
    case(status)
      "on":      color := COLOR_GREEN; txt := "Merchant Node Enabled";
                 OldGFSetRadioGroup(1);
                 OldGFRadioButton(20, 320, 208, 209, 1, 200);
                 OldGFRadioButton(20, 340, 208, 209, 0, 201);
      "off":     color := COLOR_RED; txt := "Merchant Node Disabled";
                 OldGFSetRadioGroup(1);
                 OldGFRadioButton(20, 320, 208, 209, 0, 200);
                 OldGFRadioButton(20, 340, 208, 209, 1, 201);
      default:   color := COLOR_GREEN; txt := "Merchant Node Enabled";
                 SetObjProperty(item, "Status", "on");
                 OldGFSetRadioGroup(1);
                 OldGFRadioButton(20, 320, 208, 209, 1, 200);
                 OldGFRadioButton(20, 340, 208, 209, 0, 201);
    endcase
  var cs := GetObjProperty(item, "#wait");
  if(cs == 1)
    color := 0x35;
    txt := "Merchant Node Is Waiting To Initialize";
  elseif(cs == 2)
    color := 0x35;
    txt := "Merchant Nodes Are Disabled Globally";
  elseif(status != "off")
    restock := OldGFCheckBox(340, 320, 208, 209, 0, 400);
    respawn := OldGFCheckBox(340, 340, 208, 209, 0, 300);
    OldGFTextLine(370, 320, COLOR_GREEN, "Restock Merchants");
    OldGFTextLine(370, 340, COLOR_GREEN, "Respawn Merchants");
  endif
  OldGFTextMid(150, 370, 300, color, txt);
  OldGFTextLine(50, 320, COLOR_GREEN, "Enable Node");
  OldGFTextLine(50, 340, COLOR_GREEN, "Disable Node");
endfunction

function ResetMerchantNode(who, ret)
  var rsp := 0;
  var newarray := type;
  foreach thing in (ret.keys)
    if((thing >= 5000) and (thing <= 5010))
      var num := thing - 5000;
      var tmpdata := type[num];
      if(tmpdata[3] == 1)
        tmpdata[3] := 0;
      else
        tmpdata[3] := 1;
      endif
      foreach thing in newarray
        if(thing == type[num])
          thing := tmpdata;
          break;
        endif
      endforeach
      rsp := 1;
    elseif((thing >= 6000) and (thing <= 6010))
      var num := thing - 6000;
      var holder := array;
      var tnum := type[num];
      foreach entry in newarray
        if(entry != tnum)
          holder.append(entry);
        endif
      endforeach
      newarray := holder;
      var anchor := tnum[2];
      if(GetObjProperty(item, "Template") == 1)
        Destroy_Node_Merc(FindMerchantType(tnum[1]) + " " + anchor[1] + " " + anchor[2] + " " + anchor[3]);
      endif
      rsp := 1;
    endif
  endforeach
  if(ret[restock.keyid])
    var ev := struct;
    ev.+type := "Restock";
    proc.SendEvent(ev);
  endif
  if((ret[200]) and (GetObjProperty(item, "Status") == "off"))
    rsp := 1;
    SetObjProperty(item, "Status", "on");
  elseif(ret[201])
    SetObjProperty(item, "Status", "off");
    rsp := 1;
  endif
  if((ret[respawn.keyid]) or (rsp == 1))
    if(ret[200])
      SendRespawnEvent();
    else
      SendDespawnEvent();
    endif
  endif
  SetObjProperty(item, "Type", newarray);
  SendSysMessage(who, "Finished updating node");
endfunction

function SendRespawnEvent()
  var ev := struct;
  ev.+type := "Respawn";
  proc.SendEvent(ev);
endfunction

function SendDespawnEvent()
  var ev := struct;
  ev.+type := "Despawn";
  proc.SendEvent(ev);
endfunction
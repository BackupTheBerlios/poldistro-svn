/* $Id$
 *
 */

use uo;
use os;
use math;

include ":worldsaver:saver";
include ":worldsaver:settings";
include ":worldsaver:report";


program WorldSaver()
	SetGlobalProperty("#WorldSaverPid", GetPid());

	var savetimes;
	UpdateTimes(savetimes);

	while ( 1 )
		var event := Wait_For_Event(10);
		if ( event )
			case ( event.type )
				EVENT_SAVE_NOW:
					DoTheSave();
					break;
			endcase
		else
			if ( ShouldSave(savetimes ) )
				DoTheSave();
				UpdateTimes(savetimes);
			endif
		endif
	endwhile

	return 1;
endprogram

function DoTheSave()

	var save_result := SaveWorldState();

	if ( save_result == error )
		SVR_ReportText("!!! Error saving world state. Restarting POL in 20 seconds !!!", SAVER_REPORT_SYSLOG+SAVER_REPORT_BROADCAST);
		sleep(20);
		ShutDown();
	else
		set_critical(1);
		var save_time := save_result.ElapsedMilliseconds;
		save_time := Cdbl(CDbl(save_time)/CDbl(1000));
		save_time := FormatRealToString(save_time, 2);
		set_critical(0);

		SVR_ReportText("Finished world save. ("+save_time+")", SAVER_REPORT_SYSLOG+SAVER_REPORT_BROADCAST);
		SVR_ReportText("Saver - CleanObjects["+save_result.CleanObjects+"] DirtyObjects["+save_result.DirtyObjects+"]", SAVER_REPORT_SYSLOG);
	endif

	return 1;
endfunction

function ShouldSave(byref savetimes)
	if ( savetimes.save < polcore().systime )
		return 1;
	endif
	
	return 0;
endfunction

function UpdateTimes(byref savetimes)
	var cfg_settings := SVR_GetSettingsCfgElem("Settings");

	var wait := CInt(cfg_settings.SaveTime) * 60;
	if ( !wait )
		wait := 3600; // 1 hour if not set.
	endif
	var warn := CInt(cfg_settings.SaveAnnounce) * 60;

	savetimes := struct;
	savetimes.+last := polcore().systime; 		// Time the last save took place.
	savetimes.+save := polcore().systime + wait;	// Time the next save will happen.
	if ( warn )
		savetimes.+warn := savetimes.save-warn; // Time the next save warning will come up.
	endif

	return 1;
endfunction

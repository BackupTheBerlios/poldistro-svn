// $Id$

use cfgfile;
use uo;
use os;

include "util/key";
include "include/objtype";
include "include/canAccess";

program useshipdeed(who, deed)
  if(DeedAlreadyBuiltFrom(deed))
    PrintTextAbovePrivate(deed, "That ship has already been built.", who);
  elseif(can_access(who, deed))
    BuildShip(who, deed);
  endif
endprogram

function BuildShip(who, deed)
  var shiptype := GetShipObjtype(deed.objtype);
  if(!shiptype)
    PrintTextAbovePrivate(deed, "That ship deed appears to be broken.", who);
    return;
  endif
  var flags := ShipFacingFlags(who.facing);
  var where := TargetMultiPlacement(who, shiptype, flags);
  if(!where)
    if(deed.graphic == 5363)
      deed.graphic := 5364;
    elseif(deed.graphic == 5364)
      deed.graphic := 5363;
    endif
    return;
  elseif((where.x == deed.x) && (where.y == deed.y))
    if(deed.graphic == 5363)
      deed.graphic := 5364;
    elseif(deed.graphic == 5364)
      deed.graphic := 5363;
    endif
    return;
  endif
  set_critical(1);
  if((where.x < who.x - 10) || (where.y < who.y - 10) || (where.x > who.x + 10) || (where.y > who.y + 10))
    SendSysMessage(who, "You cannot place a boat that far away.");
    return;
  endif
  var created := CreateShipKeysAndBuiltDeed(who, shiptype, where.x, where.y, where.z, flags);
  if(created)
    var ship := created.ship;
    var deedtype := deed.objtype;
    if((deed.name != "a toy boat") && (!deed.name["deed"]))
      ship.tillerman.name := deed.name;
    endif
    if(DestroyItem(deed))
      ship.starboardplank.locked    := 1;
      ship.portplank.locked         := 1;
      ship.hold.locked              := 1;
      var lockid := AllocLockId();
      SetObjProperty(ship.starboardplank, "lockid",      lockid);
      SetObjProperty(ship.starboardplank, "owner",       who.serial);
      SetObjProperty(ship.starboardplank, "tillermanid", ship.tillerman.serial);
      SetObjProperty(ship.portplank,      "lockid",      lockid);
      SetObjProperty(ship.portplank,      "owner",       who.serial);
      SetObjProperty(ship.portplank,      "tillermanid", ship.tillerman.serial);
      SetObjProperty(ship.hold,           "lockid",      lockid);
      SetObjProperty(ship.tillerman,      "owner",       who.serial);
      SetObjProperty(ship.tillerman,      "shipserial",  ship.serial);
      SetObjProperty(ship.tillerman,      "lockid",      lockid);
      SetObjProperty(ship.tillerman,      "shiptype",    deedtype);
      SetObjProperty(created.packkey,     "lockid",      lockid);
      SetObjProperty(created.packkey,     "shipserial",  ship.serial);
      SetObjProperty(ship.tillerman,      "decay",       (ReadGameClock()+ 864000));
      ship.tillerman.usescript := ":boat:tillerman";
    else
      DestroyItem(created.packkey);
      DestroyMulti(ship);
      SendSysMessage(who, "There was an error creating the boat.");
    endif
  endif
endfunction

function ShipFacingFlags(facing)
  var flags := 0;
  case (facing)
    DIR_N:  flags := CRMULTI_FACING_NORTH;
    DIR_NE: flags := CRMULTI_FACING_NORTH;
    DIR_E:  flags := CRMULTI_FACING_EAST;
    DIR_SE: flags := CRMULTI_FACING_SOUTH;
    DIR_S:  flags := CRMULTI_FACING_SOUTH;
    DIR_SW: flags := CRMULTI_FACING_SOUTH;
    DIR_W:  flags := CRMULTI_FACING_WEST;
    DIR_NW: flags := CRMULTI_FACING_NORTH;
  endcase
  return flags;
endfunction

function CreateShipKeysAndBuiltDeed(who, shiptype, x, y, z, flags)
  var packkey := CreateItemInBackpack(who, UOBJ_COPPER_KEY);
  if(!packkey)
    PrintTextAbovePrivate(who, "My backpack is too full!", who);
    return 0;
  endif
  var ship := CreateMultiAtLocation(x, y, z, shiptype, flags, who.realm);
  if(!ship)
    PrintTextAbovePrivate(who, "I can't place the ship there.", who);
    DestroyItem(packkey);
    return 0;
  else
    var result := struct;
    result.+packkey := packkey;
    result.+ship    := ship;
    return result;
  endif
endfunction

function DeedAlreadyBuiltFrom(deed)
  if(GetObjProperty(deed, "builtserial"))
    return 1;
  else
    return 0;
  endif
endfunction

function GetShipObjtype(objtype)
    var cfg := ReadConfigFile(":boat:itemdesc");
    var ot := GetObjtypeByName(cfg[objtype].ShipObjType);
    return Cint(ot);
endfunction
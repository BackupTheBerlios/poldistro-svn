
use uo;
use os;
use cfgfile;

include "spellcastFunctions";
include ":attributes:attributes";
include "include/dist";

program spellcast(who, spellid)

  // If this was called by start_script, all the info is in
  // the first variable

  var scroll := 0;
  if (!who.isA(POLCLASS_UOBJECT))
    spellid := who[2];
    scroll := who[3];
    who := who[1];
    if (!ReserveItem(scroll))
      SendSysMessage(who, "That scroll is already in use.");
      return 0;
    endif
  endif

  var spellcfg := ReadConfigFile(":*:spells");
  var circle := spellcfg[spellid].circle;
  var castSkill;
  var circlecfg := ReadConfigFile(":*:magiccircles");
  if (spellid < 101)
    castSkill := SKILLID_MAGERY;
  elseif (spellid < 201)
    castSkill := SKILLID_NECROMANCY;
  elseif (spellid < 301)
    castSkill := SKILLID_CHIVALRY;
  endif   
  EraseObjProperty(who, "IsMeditating");
  EraseObjProperty(who, "HealTimer");
  
  // spells cast of scrolls are treated as two circles lower
  if (scroll)
    circle := circle-2;
    if (circle < 1)
      circle := 1;
    endif
  endif
  
  if (who.npctemplate)
    return mobspellcast(who, circle);
    // From NPCs, this needs to have been run to completion.
  endif

  // Record starting conditions- if the caster is damaged or moves
  // we can choose to interrupt the spell
  var starthp := GetHp(who);
  var startx := who.x;
  var starty := who.y;
  var startz := who.z;

  var requiredMana := circlecfg[circle].Mana;
  var animation := spellcfg[spellid].Animation;
  
  if (!animation)
    animation := ANIM_CAST_DIR;
  endif
  if (requiredMana > GetMana(who))
//    who.frozen := 1;
//    PerformAction(who,animation);
//    sleepms(1200);
//    who.frozen := 0;
    SendSysMessage(who,"You do not have enough mana to cast that.", 3, 40);
//    PlaySoundEffect(who,0x005d);
//    PlayObjectCenteredEffect(who, 0x3735,0x0a, 0x1e);
    return 0;
    // Uncomment the above if you want the character to spend some time
    // trying to cast and then getting the failure sound and animation
    // when he has insufficient mana.
    // By default, the caster is just told "You do not have enough mana" 
    // and that's it.
  endif
  if (!CheckHands(who))
    return 0;
  endif
  who.frozen := 1;   // remove this if you want the caster to be able to 
                     // move while casting... though you may want to check
                     // and cancel his spellcasting if he did.
  var animReps := spellcfg[spellid].animReps;
  if (!animReps)
    animReps := circlecfg[circle].animReps;
  endif
  var n;
  PrintTextAbove(who, spellcfg[spellid].PowerWords);
  for (n := 1; n <= animReps; n := n+1)
    if ((starthp > GetHp(who)) && ((RandomInt(99)+1) > (GetEffectiveSkill(who, SKILLID_WRESTLING)/2)))
      SendSysMessage(who,"You lost your concentration.", 3, 40);
      // This costs you no mana or regs... should it?
      PlaySoundEffect(who,0x005d);
      PlayObjectCenteredEffect(who, 0x3735,0x0a, 0x1e);
      who.frozen :=0;
      return 0;
    endif
    PerformAction(who,ANIM_CAST_DIR);
    if (n < animReps)
      sleepms(750);
    endif
  endfor
  var extraWait := spellcfg[spellid].extraWait;
  if (!extraWait)
    extraWait := circlecfg[circle].extraWait;
  endif
  if (extraWait)
    sleepms(extraWait);
  endif
  who.frozen := 0;
  
  var diff := circlecfg[circle].Difficulty;
  if (CheckSkill(who,castSkill, diff, 0))
    if((starthp > GetHp(who)) && ((RandomInt(99)+1) > (GetEffectiveSkill(who, SKILLID_WRESTLING)/2)))
      SendSysMessage(who,"You lost your concentration.", 3, 40);
      return 0;
    endif
  else
    SendSysMessage(who,"The spell fizzles.", 3, 40);
    PlaySoundEffect(who,0x005d);
    PlayObjectCenteredEffect(who, 0x3735,0x0a, 0x1e);
    return 0;
  endif
  // At this point the spell has been successfully cast, assuming successful loss of mana
  // and regs, and targeting.

  if (!scroll)  // don't check for regs if casting off a scroll  
    if (!HasRegs(who, spellcfg, spellid))
      SendSysMessage(who, "You do not have sufficient reagents to cast this spell.",3,40);
      return 0;
    endif
  endif
  if (GetMana(who) < requiredMana)
    SendSysMessage(who, "You do not have sufficient mana to cast this spell.", 3, 40);
  endif
  
  // We have enough mana and regs. But don't consume them until we're done with targetting...
  
  var castOn;
  if (spellcfg[spellid].Delivery == "direct")
    var targetOptions := TGTOPT_NEUTRAL;
    if (spellcfg[spellid].Noto == "helpful")
      targetOptions := TGTOPT_HELPFUL;
    elseif (spellcfg[spellid].Noto == "harmful")
      targetOptions := TGTOPT_HARMFUL;
    endif
    castOn := Target(who, targetOptions | TGTOPT_CHECK_LOS);
    if (!castOn)
      SendSysMessage(who, "Spellcasting cancelled.",3,40);
      return 0;
    endif
    if (castOn.hidden)
      SendSysMessage(who, "You can't see that.", 3, 40);
      return 0;
    endif
    if (distance(who, castOn) >= 12)
      SendSysMessage(who, "That is too far away.", 3, 40);
      return 0;
    endif
  elseif (spellcfg[spellid].Delivery == "indirect")
    // in the indirect case we are targetting a set of coords rather than a single target.
    // if there are notoriety concerns, they are dealt with by the spell, not this script.
    castOn := TargetCoordinates(who);
    if (!castOn.x)
      SendSysMessage(who, "Spellcasting cancelled.",3,40);
      return 0;
    endif
    if (!CheckLosAt(who, castOn.x, castOn.y, castOn.z))
      SendSysMessage(who, "You can't see that.", 3, 40);
      return 0;
    endif
    if (coordist(who.x, who.y, castOn.x, castOn.y) >= 12)
      SendSysMessage(who, "That is too far away.", 3, 40);
      return 0;
    endif
  endif
  // We now have a target for the spell, if appropriate.
  if ((who.x != startx) || (who.y != starty) || (who.z != startz))
    SendSysMessage(who, "Spell lost due to movement.", 3, 40);
    return 0;
  endif
  // Can comment this block out if you want people to be able to run around while
  // holding a target cursor. It might be cute to make each step taken increase the
  // chance the spell is lost...
  
  // Now we consume regs and mana, award points, and go home.
  set_critical(1);
    if (requiredMana > GetMana(who))
      SendSysMessage(who,"You do not have enough mana to cast that.", 3, 40);
      PlaySoundEffect(who,0x005d);
      PlayObjectCenteredEffect(who, 0x3735,0x0a, 0x1e);
      return 0;
    endif  // This will be incredibly rare- the caster would need to have lost
           // the mana between the last time we checked, and here.
    if (!scroll) // don't consume regs if casting from a scroll
      if (!HasRegs(who, spellcfg, spellid))
        SendSysMessage(who, "You do not have sufficient reagents to cast this spell.", 3, 40);
        PlaySoundEffect(who, 0x005d);
        PlayObjectCenteredEffect(who, 0x3735,0x0a, 0x1e);
        return 0;
      endif
      ConsumeReagents(who, spellid);    
    endif
    SetMana(who, GetMana(who) - requiredMana);
  set_critical(0);
  if (scroll)
    if (!subtractAmount(scroll, 1))
      return 0;
    endif
  endif
  AwardRawSkillPoints(who, castSkill, getPointValue(who, (circlecfg[circle].PointValue), (spellcfg[spellid].Difficulty), castSkill));
  var parms := struct;
  parms.+caster;
  parms.+castOn;
  parms.+spellid;
  parms.caster := who;
  parms.castOn := castOn;
  parms.spellid := spellid;
  start_script(spellcfg[spellid].SpellScript, parms);
endprogram

use uo;
use os;
use basic;

include "include/eventID";
include ":attributes:attributes";
include "include/sysEvent";
include "include/objtype";

program SignListener(sign)
  var house := GetObjProperty(sign, "house_serial");
  if (house)
    house := SystemFindObjectBySerial(house);
  endif
  if(!house)
    return;
  endif
  RegisterForSpeechEvents(sign, 30);
  var owneracct, who, ev, decaytime;
  while(sign)
    owneracct := GetObjProperty(house,"owneracct");
    ev := wait_for_event(120);
    if(ev)
      who := ev.source;
      if((who.multi).serial == house.serial)
        if(who.acctname == owneracct)
          handle_speech(ev, house, sign, 3);
        else
          if(statuscheck(house, who, 1) == 1)
            handle_speech(ev, house, sign, 2);
          elseif(statuscheck(house, who, 2) == 1)
            handle_speech(ev, house, sign, 1);
          endif
        endif
      endif
    endif
    decaytime := GetObjProperty(sign,"decay");
    if(!decaytime)
      decaytime := (ReadGameClock() + 864000);
      SetObjProperty(sign, "decay", decaytime);
    endif
    if(!GetObjProperty(sign,"nodecay"))
      var tname;
      var newname := GetObjProperty(sign,"signname");
      if(!newname)
        newname := "a house";
        SetObjProperty(sign, "signname", newname);
      endif
      if (ReadGameClock() > decaytime)
        demolish(house);
      elseif((decaytime - ReadGameClock() ) > 861000 )
        tname := newname + ", [this house is like new]";
        SetName(sign, tname);
      elseif((decaytime - ReadGameClock() ) > 604800 )
        tname := newname + ", [this house is slightly worn]";
        SetName(sign, tname);
      elseif((decaytime - ReadGameClock() ) > 259200 )
        tname := newname + ", [this house is fairly worn]";
        SetName(sign, tname);
      elseif((decaytime - ReadGameClock() ) > 86400 )
        tname := newname + ", [this house is greatly worn]";
        SetName(sign, tname);
      else
        tname := newname + ", [this house is in danger of collapsing]";
        SetName(sign, tname);
      endif
    endif
    cleareventque();
  endwhile
endprogram

function cleareventque()
  var ev;
  repeat
  until(!(ev := os::wait_for_event(0)));
endfunction

function handle_speech(event, house, sign, sec)
  var text := lower(event.text );
  if((text["i wish to lock this down"]) && (sec >= 2))
    HouseFunction(house, event, 1 );
  elseif((text["i wish to release this"]) && (sec >= 2))
    HouseFunction(house, event, 2 );
  elseif((text["i wish to secure this"]) && (sec >= 2))
    secure(house, event );
  elseif((text["i wish to unsecure this"]) && (sec >= 2))
    unsecure(house, event);
  elseif((text["remove thyself"]) && (sec >= 1))
    remove(house, sign, event);
  elseif((text["i ban thee"]) && (sec >= 1))
    housebanning(house, event, sign);
  elseif((text["i wish to place a trash barrel"]) && (sec >= 2))
    trashbarrel(house, event);
  elseif(text["reveal thyself"])
    reveal(house, event);
  endif
endfunction

function remove(house, sign, event)
  var who := event.source;
  if (who.multi.serial == house.serial)
    SendSysMessage(who, "Target the person you wish to remove.");
    var idiot := Target(who, TGTOPT_NOCHECK_LOS);
    if (!idiot)
      SendSysMessage(who, "Cancelled.");
      return;
    elseif (AP_GetVital(idiot, MANA) == error)
      SendSysMessage(who,"You cannot eject items.");
      return;
    endif
    if(InHouse(idiot, house))
      var friend := statuscheck(house, idiot, 2);
      var coown  := statuscheck(house, idiot, 1);
      var staff  := who.cmdlevel;
      if ((coown == 0) && (friend == 0) && (idiot.serial != who.serial) && (staff < 2))
        MoveCharacterToLocation(idiot, sign.x, sign.y, sign.z, MOVECHAR_FORCELOCATION);
        SendSysMessage(idiot,"You have been ejected from the house!");
        return;
      elseif((friend == 1) || (coown == 1) || (idiot.acctname == GetObjProperty(house,"owneracct")))
        SendSysMessage(who,"You cannot eject friends.");
        return;
      elseif (idiot.serial == who.serial)
        SendSysMessage(who,"You cannot eject yourself.");
        return;
      else
        SendSysMessage(who,"You cannot do that!");
      endif
    else
      SendSysMessage(who,"That person isn't inside the house.");
      return;
    endif
  else
    SendSysMessage(who,"You must be in a house to do this.");
    return;
  endif
endfunction

function trashbarrel(house, event)
  var who := event.source;
  var barrelcheck := GetObjProperty(house, "barrelserial");
  if(barrelcheck)
    var exists := 0;
    foreach thing in (house.items)
      if(thing.serial == barrelcheck)
        exists := 1;
        break;
      endif
    endforeach
    if(exists == 1)
      SendSysMessage(who, "This house already has a trash barrel.");
      return;
    endif
  endif
  var items := ListItemsNearLocation(who.x, who.y, who.z, 1, who.realm);
  var check := 0;
  foreach thing in items
    if(thing.objtype == 0x8889)
      check := 1;
    endif
  endforeach
  if(check == 0)
    var barrel := CreateItemAtLocation(who.x, who.y, who.z, 0x7007, 1, who.realm);
    if(barrel)
      SetObjProperty(house, "barrelserial", barrel.serial);
      SetObjProperty(barrel, "houseserial", house.serial);
    endif
  else
    SendSysMessage(who, "You cannot place that here.");
  endif
endfunction

function HouseFunction(house, event, num)
  var itemt := Target(event.source, TGTOPT_NOCHECK_LOS);
  if(!itemt)
    SendSysMessage(event.source, "Cancelled.");
    return;
  endif
  var lists := GetObjProperty(house, "footage");
  var itemlist := {};
  var holder;
  foreach thing in lists
    holder := ListObjectsInBox(thing[1], thing[2], thing[3], thing[4], thing[5],thing[6], house.realm);
    foreach thing in holder
      itemlist.append(thing);
    endforeach
  endforeach
  if(itemt in itemlist)
    case(num)
      1: if(GetObjProperty(house, "numlockdowns") > 0)
           if(itemt.movable == 1)
               itemt.movable := 0;
               SetObjProperty(itemt, "lockeddown", 1);
               SetObjProperty(itemt, "houseserial", house.serial);
               SetObjProperty(house, "numlockdowns", GetObjProperty(house, "numlockdowns") - 1);
               SendSysMessage(event.source, "Locked Down.");
           elseif((itemt.movable == 0) && (GetObjProperty(itemt,"lockeddown") ==1))
             SendSysMessage(event.source, "That item is already locked down!");
             return;
           elseif((itemt.movable == 0) && (GetObjProperty(itemt,"secure") ==1))
             SendSysMessage(event.source, "That item is secure!");
             return;
           else
             SendSysMessage(event.source, "You cannot lock that down!");
             return;
           endif
         else
           SendSysMessage(event.source, "The house has no more lockdowns remaining.");
         endif
      2: if(GetObjProperty(itemt, "lockeddown") && (itemt.movable == 0))
           if(GetObjProperty(itemt,"secure") ==1)
             EraseObjProperty(itemt,"secure");
             var oldscript := GetObjProperty(itemt,"oldscript");
             if(oldscript == error)
               oldscript := "";
             endif
             itemt.usescript := oldscript;
             SetObjProperty(house, "numsecure", GetObjProperty(house, "numsecure") + 1);
             EraseObjProperty(itemt, "oldscript");
             EraseObjProperty(itemt, "boxserial");
           endif
           EraseObjProperty(itemt, "houseserial");
           itemt.movable := 1;
           EraseObjProperty(itemt, "lockeddown");
           SetObjProperty(house, "numlockdowns", GetObjProperty(house, "numlockdowns") + 1);
           SendSysMessage(event.source, "Released.");
           return;
         elseif ((itemt.movable == 0) &&(GetObjProperty(itemt,"secure") ==1))
           EraseObjProperty(itemt,"secure");
           var oldscript := GetObjProperty(itemt,"oldscript");
           if (oldscript == error)
             oldscript := "";
           endif
           itemt.usescript := oldscript;
           SetObjProperty(house, "numsecure", GetObjProperty(house, "numsecure") + 1);
           EraseObjProperty(itemt, "houseserial");
           EraseObjProperty(itemt, "oldscript");
           itemt.movable := 1;
           SendSysMessage(event.source, "Released.");
           return;
         elseif (itemt.movable == 1)
           SendSysMessage(event.source, "That is not locked down.");
           return;
         else
           SendSysMessage(event.source, "You cannot release that.");
           return;
         endif
    endcase
  else
    SendSysMessage(event.source, "That is not inside your house.");
  endif
endfunction

function secure(house, event)
  var itemt := Target(event.source);
  if(!itemt)
    SendSysMessage(event.source, "Cancelled.");
    return;
  endif
  if(GetObjProperty(house, "numsecure"))
    var lists := GetObjProperty(house, "footage");
    var itemlist := {};
    var holder;
    foreach thing in lists
      holder := ListObjectsInBox(thing[1], thing[2], thing[3], thing[4], thing[5],thing[6], house.realm);
      foreach thing in holder
        itemlist.append(thing);
      endforeach
    endforeach
    if(itemt in itemlist)
      if(itemt.movable == 0)
        if(GetObjProperty(itemt,"lockeddown") ==1)
          SendSysMessage(event.source, "Securing this container. Your house will be credited with one lockdown.");
          SetObjProperty(house, "numlockdowns", GetObjProperty(house, "numlockdowns") + 1);
          EraseObjProperty(itemt,"lockeddown");
        else
          SendSysMessage(event.source, "You cannot secure that.");
          return;
        endif
      endif
      itemt.movable := 0;
      SetObjProperty(itemt, "boxserial", itemt.serial);
      SetObjProperty(itemt, "houseserial", house.serial);
      SetObjProperty(itemt, "secure", 1);
      SetObjProperty(itemt,"oldscript", itemt.script);
      itemt.usescript := ":housing:secureCont";
      SetObjProperty(house, "numsecure", GetObjProperty(house, "numsecure") - 1);
      SendSysMessage(event.source, "Container is secure.");
    else
      SendSysMessage(event.source, "That item is not inside your house.");
    endif
  else
    SendSysMessage(event.source, "The house has no more secure containers remaining.");
  endif
endfunction

function unsecure(house, event)
  var itemt := Target(event.source);
  if(!itemt)
    SendSysMessage(event.source, "Canceled.");
    return;
  endif
  if (!GetObjProperty(itemt,"secure") ==1)
    SendSysMessage(event.source,"You cannot unsecure that.");
    return;
  endif
  EraseObjProperty(itemt,"secure");
  if(GetObjProperty(itemt, "houseserial") == house.serial)
    var lockdowns := GetObjProperty(house, "numlockdowns");
    var oldscript := GetObjProperty(itemt,"oldscript");
    if(oldscript == error)
      oldscript := "";
    endif
    itemt.usescript := oldscript;
    SetObjProperty(house, "numsecure", GetObjProperty(house, "numsecure") + 1);
    EraseObjProperty(itemt, "houseserial");
    EraseObjProperty(itemt, "oldscript");
    EraseObjProperty(itemt, "boxserial");
    if(lockdowns > 0)
      SetObjProperty(itemt, "lockeddown", 1);
      SetObjProperty(house, "numlockdowns", lockdowns - 1);
      SendSysMessage(event.source, "The container is locked down and your house has been credited one secure container.");
    else
      itemt.movable := 1;
      SendSysMessage(event.source, "The container is no longer locked down and your house has been credited one secure container.");
    endif
  else
    SendSysMessage(event.source, "That is not in your house.");
  endif
endfunction

function housebanning(house, event, sign)
  var who := event.source;
  var banlist := GetObjProperty(house, "banlist");
  if(!banlist)
    banlist := {};
  endif
  if(len(banlist) >= 20)
    SendSysMessage(event.source, "The ban list is full.");
    return;
  endif
  SendSysMessage(event.source,"Select character.");
  var idiot := Target(event.source);
  if(!idiot)
    SendSysMessage(who, "Cancelled.");
    return;
  endif
  if(!(idiot.isA(POLCLASS_NPC) || idiot.acctname))
    SendSysMessage(who, "That cannot be added to the list.");
    return;
  endif
  if((InHouse(idiot, house)) or (idiot.multi == house))
    var friend := statuscheck(house, idiot, 2);
    var coown  := statuscheck(house, idiot, 1);
    var banned := statuscheck(house, idiot, 3);
    var staff  := idiot.cmdlevel;
    var act    := idiot.acctname;
    var own    := GetObjProperty(house, "owneracct");
    if((coown == 0) && (banned == 0) && (friend == 0) && ( act != own) && (idiot.serial != who.serial) && (staff < 2))
      SendSysMessage(idiot, "You have been ejected from the house!");
      MoveCharacterToLocation(idiot, sign.x, sign.y, sign.z);
      banlist.append(idiot.serial);
      SetObjProperty(house, "banlist", banlist);
      SendSysMessage(event.source, idiot.name + " was banned from your house.");
      return;
    elseif((friend == 1) || (coown == 1) || (act == own))
      SendSysMessage(who,"You cannot ban friends.");
      return;
    elseif(banned == 1)
      SendSysMessage(who,"That person is already banned.");
      MoveCharacterToLocation(idiot, sign.x, sign.y, sign.z, MOVECHAR_FORCELOCATION);
      return;
    else
      SendSysMessage(who,"You cannot do that!");
      return;
    endif
  else
    SendSysMessage(event.source, "That cannot be added to the list.");
    return;
  endif
endfunction

function InHouse(who, house)
  var lists := GetObjProperty(house, "footage");
  var holder := 0;
  foreach thing in lists
    foreach thing in ListObjectsInBox(thing[1], thing[2], thing[3], thing[4], thing[5],thing[6], house.realm)
      if(thing == who)
        holder := 1;
        break;
      endif
    endforeach
    if(holder == 1)
      break;
    endif
  endforeach
  return holder;
endfunction

function demolish(house)
  // Find the bantiles and ladders to make sure they get destroyed
  var bantiles := GetObjProperty(house, "bantiles");
  var thetile;
  foreach entry in bantiles
    thetile := SystemFindObjectBySerial(entry);
    destroyitem(thetile);
  endforeach
  var lists := GetObjProperty(house, "footage");
  var itemlist := {};
  foreach entry in lists
    foreach thing in ListObjectsInBox(entry[1], entry[2], entry[3], entry[4], entry[5],entry[6], house.realm)
      itemlist.append(thing);
    endforeach
  endforeach
  var builtdeed := GetObjProperty(house, "builtdeed");
  if(builtdeed)
    if(!DestroyItem(SystemFindObjectBySerial(builtdeed)))
      DestroyItem(SystemFindObjectBySerial(builtdeed, 1));
    endif
  endif
  foreach thing in itemlist
    if(GetObjProperty(thing, "houseserial") == house.serial)
      if ((GetObjProperty(thing, "secure") == 1) && (thing.movable == 0))
        EraseObjProperty(thing, "secure");
        if(GetObjProperty(thing, "houseserial" ) == house.serial)
          var oldscript := GetObjProperty(thing, "oldscript");
          if (oldscript == error)
            oldscript := "";
          endif
          thing.usescript := oldscript;
          thing.movable := 1;
          EraseObjProperty(thing, "houseserial" );
          EraseObjProperty(thing, "oldscript" );
        endif
      elseif ((GetObjProperty(thing, "lockeddown" ) == 1) && (thing.movable == 0))
        thing.movable := 1;
        EraseObjProperty(thing, "houseserial");
        EraseObjProperty(thing, "lockeddown");
      elseif (thing.movable == 0)
        if(thing.objtype == 0xa390)
           MoveItemToLocation(thing, thing.x, thing.y, (thing.z - 7), MOVEITEM_FORCELOCATION);
        else
          DestroyItem(thing);
        endif
      endif
    endif
  endforeach
  DestroyMulti(house );
  return;
endfunction

function statuscheck(house, who, type)
  var nfo := {};
  case(type)
    1: nfo := GetObjProperty(house, "coownlist");
    2: nfo := GetObjProperty(house, "friendlist");
    3: nfo := GetObjProperty(house, "banlist");
  endcase
  if(who.serial in nfo)
    return 1;
  else
    return 0;
  endif
endfunction

function reveal(house, event)
  var lists := GetObjProperty(house, "footage");
  var holder := 0;
  foreach thing in lists
    foreach thing in ListObjectsInBox(thing[1], thing[2], thing[3], thing[4], thing[5],thing[6], house.realm)
      if((AP_GetStat(thing, STRENGTH)) and (thing.hidden))
        thing.hidden := 0;
        holder := holder + 1;
      endif
    endforeach
  endforeach
  if(!holder)
    SendSysMessage(event.source, "You didn't find anyone.");
  elseif(holder == 1)
    PrintTextAbovePrivate(event.source, "You have found one person hiding!", event.source);
  else
    PrintTextAbovePrivate(event.source, "You have found " + holder + " people hiding!", event.source);
  endif
endfunction
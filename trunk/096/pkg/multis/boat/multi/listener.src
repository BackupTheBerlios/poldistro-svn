/*
 * $Id$
 *
 */

use uo;
use os;
use boat;
use cfgfile;

include "include/sysEvent";
include ":boat:cmdParser";

program BoatController(boat)
	Initialize(boat);
	
	var repeat_cmd;
	var last_sound;
	
	while ( boat )
		var ev;
		
		if ( repeat_cmd != -1 && !Events_Waiting() )
			while ( !ev )
				if ( last_sound < polcore().systime-120 )
					PlaySoundEffect(boat, 0x14);
					last_sound := polcore().systime;
				endif
				// If there are no commands, and no incoming speech 
				// then make the event wait really long so boats take up very
				// little cpu time when they are not in use.
				// This is where they enter a sleep-mode.
				ev := Wait_For_Event(120);
			endwhile
		endif
		if ( !ev )
			ev := Wait_For_Event(0);
		endif
				
		var delay := (boat.tillerman).GetSpeed();
		sleepms(delay);		
				
		if ( ev.text )
			if ( (boat.tillerman).IsOnBoat(boat, ev.source) )
				if ( (boat.tillerman).CanCommand(ev.source) )
					var cmd_list := ParseCommands(ev.text);
					foreach command in ( cmd_list )
						repeat_cmd := DoCommand(boat, command);
						sleepms(2);
					endforeach
				endif
			endif
		elseif ( repeat_cmd != -1 )
			var boat_x := boat.x;
			var boat_y := boat.y;
			ClosePlanks(boat);
			MoveBoatRelative(boat, repeat_cmd);
			if ( boat.x == boat_x && boat_y == boat.y )
				repeat_cmd := -1;
			endif
		endif
	endwhile
endprogram

function Initialize(boat)
	while ( !(boat.tillerman).GetOwner() )
		sleep(2);
	endwhile
	
	SetObjProperty(boat.tillerman, "#PID", GetPid());
	
	//ToDo:
	//Consider checking the size of the boat then set this accordingly.
	RegisterForSpeechEvents(boat, 15);
	
	return 1;
endfunction

function DoCommand(byref boat, byref cmd)
	var cmd_cfg := ReadConfigFile(":boat:config/commands");
	var cmd_elem := GetConfigStringArray(cmd_cfg[cmd], "CMD");
	
	if ( cmd_elem.Anchor == 2 )
		if ( !(boat.tillerman).IsAnchored() )
			(boat.tillerman).SetAnchorStatus(1);
			PrintTextAbove(boat.tillerman, "The anchor has been lowered.");
		else
			PrintTextAbove(boat.tillerman, "The anchor has already been lowered.");
		endif
		return -1;
	elseif ( cmd_elem.Anchor == 1 )
		if ( (boat.tillerman).IsAnchored() )
			(boat.tillerman).SetAnchorStatus(0);
			PrintTextAbove(boat.tillerman, "The anchor has been raised.");
		else
			PrintTextAbove(boat.tillerman, "The anchor is already raised.");
		endif
		return -1;
	endif
	
	if ( !(boat.tillerman).IsAnchored() )
		if ( cmd_elem.Turn )
			ClosePlanks(boat);
			TurnBoat(boat, cmd_elem.Turn);
			return -1;
		elseif ( cmd_elem.Stop )
			return -1;
		elseif ( cmd_elem.Move )
			MoveBoatRelative(boat, cmd_elem.Direction);
			return cmd_elem.Direction; // Keep following this command
		endif
	endif
	
	return -1;
endfunction

function ClosePlanks(byref boat)
	var plank_a := boat.starboardplank;
	var plank_b := boat.portplank;
	
	if ( plank_a.Extended() )
		plank_a.Retract(0);
	endif
	
	if ( plank_b.Extended() )
		plank_b.Retract(0);
	endif
endfunction

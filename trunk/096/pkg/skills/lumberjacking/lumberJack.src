/*
 * $Id$
 *
 */
use uo;
use os;

include ":attributes:attributes";
include ":datafile:datafile";
include ":lumberjacking:settings";
include ":lumberjacking:lumberJack";
include "include/client";

program skill_LumberJack(who, tool)
	SendSysMessage(who, "Select a tree to chop.");
	var targ := TargetCoordinates(who);
	
	if ( !targ )
		SendSysMessage(who, "Cancelled.");
		return 0;
	elseif ( !LJ_IsTree(targ.objtype) )
		SendSysMessage(who, "That is not a tree.");
		return 0;
	endif
	
	var orig_x := who.x;
	var orig_y := who.y;
	
	var num_loops := RandomDiceRoll("1d5");
	for ( num_loops; num_loops>=0; num_loops:=num_loops-1 )
		if ( !ChopTree(who, tool, targ, orig_x, orig_y) )
			break;
		endif
		// Wear down tool function call goes here.
		sleep(3);
	endfor

	SendSysMessage(who, "You stop lumberjacking.");
endprogram

function ChopTree(who, tool, targ, orig_x, orig_y)
	var i:=RandomDiceRoll("3d4");
	for ( i; i>=0; i:=i-1 )
		if ( !CanChop(who, tool, targ, orig_x, orig_y) )
			return 0;
		endif

		PerformAction(who, ANIM_ATTACK_2HAND_WIDE);
		//PlaySoundEffect(who, SFX_SKILL_LUMBERJACK); - Need to get sound constants in client.inc!
		sleepms(1200);
	endfor

	var wood_type := LJ_GetWoodType(who.realm, targ.x, targ.y);
	var wood_amount := LJ_GetWoodAmount(who.realm, targ.x, targ.y);

	var material_cfg := ReadConfigFile(":crafting:configs/materials");
	var diff_mod := material_cfg[wood_type].Difficulty;
	if ( material_cfg.errortext )
		SendSysMessage(who, "Error - Unable to open :crafting:configs/materials.cfg ->"+material_cfg.errortext);
		return 0;
	endif

	var max_wood := CInt(LJ_GetSettingsCfgElem("Settings").MaxWood);
	// The less wood there is, the more difficult it becomes.
	var difficulty := CInt( 40 + ( diff_mod - 0.4 ) * 100 - 40 * wood_amount / max_wood );
	
	wood_amount := wood_amount - 1;
	LJ_SetWoodAmount(who.realm, targ.x, targ.y, wood_amount);

	if ( SkillCheck(who, LUMBERJACKING, difficulty) > 0 )
		CreateItemInBackPack(who, wood_type, 1);
		SendSysMessage(who, "You place the log in your pack.");
		return 1;
	endif

	SendSysMessage(who, "You are unable to produce a useable log from this tree.");
	return 0;
endfunction

function CanChop(who, axe, targ, orig_x, orig_y)
	if ( who.hidden )
		SendSysMessage(who, "You stop chopping to remain hidden.");
		return 0;
	elseif ( who.x != orig_x || who.y != orig_y )
		SendSysMessage(who, "You turn your attention away from lumberjacking.");
		return 0;
	elseif ( !(axe in ListEquippedItems(who)) )
		SendSysMessage(who, "You put the axe away and stop chopping.");
		return 0;
	elseif ( LJ_GetWoodAmount(who.realm, targ.x, targ.y) <= 0 )
		SendSysMessage(who, "That tree has been chopped down.");
		return 0;
	elseif ( GetEquipmentByLayer(who, LAYER_MOUNT) )
		SendSysMessage(who, "You can't chop while mounted.");
		return 0;
	else
		return 1;
	endif
endfunction
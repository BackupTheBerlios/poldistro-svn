/* $Id$
 *
 */
use uo;
use os;

include ":attributes:attributeConstants";
include ":attributes:attributes";
include ":attributes:skillCheck";
include ":crafting:crafting";
include ":crafting:toolWear";
include "include/canAccess";

var item_config     := ReadConfigFile(":cartography:itemdesc");
var craft_config    := ReadConfigFile(":cartography:cartography");

program use_MapmakersPen(who, tool)

	if(!can_access(who, tool))
		return 0;
	endif
	if((!tool.movable) or !ReserveItem(tool))
		SendSysMessage(who, "You cannot use that");
		return 0;
	endif
	if( !(tool in EnumerateItemsInContainer(who.backpack)) )
		SendSysMessage(who, "That item is not in your backpack.");
		return 0;
	endif

	EraseObjProperty(who, "IsMeditating");
	EraseObjProperty(who, "HealTimer");

	var rinfo := sendCraftGump(who, CARTOGRAPHY);

	// OK was pressed, close it on out
	if(rinfo == 0)
		return 0;
	endif

	var the_objtype := rinfo[1];
	var amt         := rinfo[2];

	makeCartographyMap(who, the_objtype, amt, tool);

	return 1;

endprogram


function makeCartographyMap(who, map_objtype, amount, tool)


	var blank_array := { 0xE34, 0xEF3, 0x14EB, 0x14EC };
	var blank := Target(who);
	if( !blank )
		SendSysMessage(who, "Cancelled.");
		return 0;
	endif
	if( !(blank.objtype in blank_array)  || GetObjProperty(blank, "decoder") )
		SendSysMessage(who, "You can only inscribe blank maps or scrolls.");
		return 0;
	endif
	if( !can_access(who, blank) )
		return 0;
	endif
	if( !(blank in EnumerateItemsInContainer(who.backpack)) )
		SendSysMessage(who, "That item is not in your backpack.");
		return 0;
	endif
	if( who.realm != "britannia" )
		SendSysMessage(who, "Sorry, only britannia is chartable.");
		return 0;
	endif
	if( (who.x > 5120) && (who.y < 2304) )
		SendSysMessage(who, "You cannot chart dungeons.");
		return 0;
	endif

	var itemname := craft_config[map_objtype].name;
	var material := Cint(craft_config[map_objtype].material);
	var reqd := Cint(craft_config[map_objtype].skill);
	var diff := Cint(craft_config[map_objtype].difficulty);
	var pts  := Cint(craft_config[map_objtype].points);

	var counter := 0, x := who.x, y := who.y;

	while(counter < amount)
		if((who.x != x) || (who.y != y))
			SendSysMessage(who, "You stop inscribing.");
			break;
		endif
		if(!tool)
			break;
		endif

		sleep(2);

		if(GetAmount(blank) >= material)
			if( CraftCheckSkill(who, craft_skill, diff, pts) )
				var theitem := CreateCraftedMap(who, craft_skill, blank, map_objtype, material, itemname, reqd);
				if( TypeOf(theitem) != "ItemRef" )
					SubtractAmount(blank, material);
					SendSysMessage(who, "You failed to create the item, and some of your materials are lost.");
					counter := counter + 1;
					continue;
				else
					CheckToolWear (who, tool, craft_skill);
					var props;
					case(theitem.objtype)
						0x6500:	props := array("local", who.x - 265, who.y - 260, who.x + 265, who.y + 260, 200, 200);
							encodeMap(props, theitem);
						0x6501:	props := array("regional", who.x - 850, who.y - 800, who.x + 850, who.y + 800, 400, 400);
							encodeMap(props, theitem);
						0x6502: props := array("world", 0, 0, 5119, 4095, 500, 400);
							encodeMap(props, theitem);
					endcase
				endif
			else
				if( SubtractAmount(blank, material) )
					SendSysMessage(who, "You lost some material");
				endif
			endif
		else
			SendSysMessage(who, "You don't have the resources required to make that item.");
			counter := 100;
			break;
		endif
		counter := counter + 1;
	endwhile

	return 0;

endfunction


function encodeMap(map_definitions, map)

	if( map_definitions[2] < 0 )
		map_definitions[2] := 0;
	endif
	if( map_definitions[3] < 0 )
		map_definitions[3] := 0;
	endif
	map.xwest      := map_definitions[2];
	map.ynorth     := map_definitions[3];
	map.xeast      := map_definitions[4];
	map.ysouth     := map_definitions[5];
	map.gumpwidth  := map_definitions[6];
	map.gumpheight := map_definitions[7];

	return 1;

endfunction


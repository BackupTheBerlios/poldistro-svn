/*
 * $Id$
 *
 */

use uo;
use os;
use cfgfile;

include ":attributes:attributes";
include ":magery:spells";
include ":containers:containers";
include "include/itemdesc";
include "include/client";

program SpellStarter(params)
	var who		:= params[1]; // Caster.
	var spell_id	:= params[2]; // Id # of the spell.
	var scroll	:= params[3]; // Scroll object being used.
	var targ	:= params[4]; // NPC target
	params := 0;	// No longer needed
	
	Attach(who);
	
	var spell_elem := MS_GetSpellsCfgElem(spell_id);

	// If spell is set to 'TestOnly 1', then it requires cmdlevel or #SpellTester CProp before it can be used.
	if ( spell_elem.TestOnly && (!who.cmdlevel) )
		// They need #TestSpell to cast it
		if ( !GetObjProperty(who, "#SpellTester") )
			FailSpell(who);
			return 0;
		endif
	elseif ( spell_elem.NPCOnly && !who.npctemplate )
		PrintTextAbove(who, "Unable to cast - NPC only spell.");
		return 0;
	endif

	var attribute		:= spell_elem.Attribute;
	var delay		:= spell_elem.BaseDelay;
	var difficulty		:= spell_elem.Difficulty;
	var mana_cost		:= spell_elem.ManaCost;
	if ( !attribute )
		attribute := MAGERY;
	endif

	if ( GetObjProperty(who, "#medding") )
		SendSysMessage(who, "You can not cast right now.");
		return 0;
	else
		SetObjProperty(who, "#medding", 1);
	endif

	if ( who.squelched && !who.npctemplate )
		SendSysMessage(who, "Something prevents you from casting.");
		FailSpell(who);
		return 0;
	elseif ( !ConsumeVital(who, MANA, mana_cost) )
		SendSysMessage(who, "You are too tired to cast.");
		FailSpell(who);
		return 0;
	elseif ( !CheckReagents(who, spell_elem, scroll) )
		FailSpell(who);
		return 0;
	elseif ( !EquipmentCheck(who) )
		FailSpell(who);
		return 0;
	elseif ( !CheckDelay(who, attribute, difficulty, delay) )
		FailSpell(who);
		SendSysMessage(who, "Your concentration has been broken.");
		return 0;
	else
		var skill_check := SkillCheck(who, attribute, difficulty);
		if ( skill_check > 0 )
			var info := struct;
			info.+script		:= spell_elem.script;
			info.+attribute		:= attribute;
			info.+skill_check	:= skill_check;
			info.+targ		:= targ;
			info.+pid		:= GetPid();
			info.+spellId		:= spell_id;

			var script := start_script(spell_elem.Script, {who, info});
			if ( script.errortext )
				SendSysMessage(who, "Unable to start ["+spell_elem.script+"] -> "+script.errortext);
			endif

			var ev;
			while( script.pid && !ev )
				ev := wait_for_event(1);
			endwhile
		else
			SendSysMessage(who, "You are unable to build the concentration needed to cast.");
		endif
	endif

	EraseObjProperty(who, "#medding");
endprogram

function CheckDelay(who, attribute, difficulty, base_delay)
	if ( who.npctemplate )
		// NPCs are allowed to move.
		return 1;
	endif
	
	SendSysMessage(who, "You begin building the concentration needed to cast.");
	var equip_delay := GetEquipmentDelay(who);
		
	var my_x := who.x;
	var my_y := who.y;
	
	var skill := AP_GetSkill(who, attribute);
	var delay := CInt(CDbl(base_delay) * (CDbl(difficulty) / CDbl(skill)));
	delay := delay+equip_delay;
	
	if ( delay < 50 )
		delay := 50;
	endif
	var script := start_script("movementCheck", {who, GetPid(), my_x, my_y});
	
	MS_SpellDebug(who, "Cast delay ->"+delay);
	
	sleepms(delay);
	
	// Delay is over, stop the movement checker.
	script.kill();
	
	if ( Events_Waiting() > 0 )
		// movementCheck.ecl sent a "moved" event.
		return 0;
	else
		// Player stood still and can move on.
		return 1;
	endif
endfunction

function GetEquipmentDelay(who)
	/*
	var weight := 0;
	var ar := 0;
	foreach item in EnumeratePhysicalItems(who)
		weight := weight+item.weight;
		ar := ar+item.ar;
	endforeach
	
	return {weight, ar};
	*/
	
	var cfg := ReadConfigFile(":*:itemdesc");
	var delay := 0;
	foreach item in ListEquippedItems(who)
		delay := delay+CInt(cfg[item.objtype].CastDelay);
		sleepms(2);
	endforeach
	
	return delay;
endfunction

function EquipmentCheck(who)
	var item_cfg := ReadConfigFile(":*:itemdesc");
	foreach item in ListEquippedItems(who)
		if ( item_cfg[item.objtype].BlocksCastingIfInHand ) // God thats long!
			return 0;
		endif
		sleepms(2);
	endforeach
	return 1;
endfunction

function CheckReagents(who, byref spell_elem, scroll)
	if ( who.npctemplate )
		// NPCs don't need reagents to cast.
		return 1;
	elseif ( scroll )
		return SubtractAmount(scroll, 1);
	endif
	
	var reagent_costs := GetConfigStringDictionary(spell_elem, "RegCost");
	
	// Before consuming, verify that there is enough of everything.
	foreach amount in ( reagent_costs )
		amount := CInt(amount);
		if ( !amount )
			amount := 1;
		endif
		var objtype := GetObjTypeByName(CInt(_amount_iter));
		
		if ( AmountInContainer(who.backpack, objtype) < amount )
			SendSysMessage(who, "You do not have enough "+GetObjTypeDesc(objtype, (amount>1)));
			return 0;
		endif
		sleepms(2);
	endforeach
	// Consume reagents - CInt() and < 1 checks already done in previous loop.
	// Foreach is a pointer!
	foreach amount in ( reagent_costs )
		ConsumeSubstance(who.backpack, GetObjTypeByName(_amount_iter), amount);
		sleepms(2);
	endforeach

	return 1;
endfunction

function FailSpell(who)
	// Simple function for handling effects when a caster
	// fails the casting.
	EraseObjProperty(who, "#medding");
	PlayObjectCenteredEffect(who, GFX_SPELL_FAIL, 5, 50);
	PlaySoundEffect(who, SFX_SPELL_FAIL);
endfunction

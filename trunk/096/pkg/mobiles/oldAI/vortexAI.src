use npc;
use os;
use uo;
use cfgfile;

include "include/eventID";
include "include/sysEvent";
include "include/client";
include ":npcutils:names";
include ":npcutils:NPCUtil";
include "include/objtype";
include "include/dist";
include ":npcutils:anchors";
include ":oldAI:combat/vortexCombatEvent";
include ":oldAI:setup/setup";
include ":oldAI:main/sleepMode";

const HALT_THRESHOLD := 8;
var npccfgfile := ReadConfigFile( "::npcdesc" );
var idlesnd1 := CInt(npccfgfile[me.npctemplate].idlesound1);
var idlesnd2 := CInt(npccfgfile[me.npctemplate].idlesound2);
var masterserial := GetObjProperty(me, "master");
var waittime := 0;
var ev := 0;

program KillPlayers()
  foreach char in EnumerateOnlineCharacters()
    if(char.serial == masterserial)
      master := char;
      break;
    endif
  endforeach
  if(!master)
    master := SystemFindObjectBySerial(CInt(masterserial), SYSFIND_SEARCH_OFFLINE_MOBILES);
  endif
  SetScriptController( master );
  SetWarMode( 0 );
  main_AI_loop();
endprogram

function CloseDistance(opponent)
  case (Distance(me, opponent))
    1:
    0:       return 1;
    default: RunToward(opponent);
             return 0;
  endcase
endfunction

function main_AI_loop()
  var wanders := 0;
  EnableMainEvents();
  look_around();
  while (1)
    ev := os::wait_for_event(5);
	if(wanders > 60)
	  wanders :=0;
	  ev := sleepmode();
	endif
	if(ev)
	  repeat
	    case(ev.type)
          SYSEVENT_ENTEREDAREA:
          SYSEVENT_ENGAGED:
          SYSEVENT_DAMAGED:     Fight(ev.source);
	    endcase
      until (! (ev := os::wait_for_event(1)) );
    endif
    look_around();
    wander();
	wanders := wanders +1;
  endwhile
endfunction

function Fight(opponent)
  if((opponent.cmdlevel > 0) || (opponent == me))
    SetWarMode(0);
    opponent := 0;
	return;
  endif
  set_priority(50);
  SetOpponent(opponent);
  prepare_for_fight(opponent);
  TurnToward(opponent);
  var loops := 0;
  waittime := 0;
  while((opponent) && (!opponent.dead) && (!opponent.hidden) && (!opponent.concealed) && (dist(me,opponent) < 20))
	if(!CloseDistance(opponent))
	  loops := loops + 1;
	  waittime := 0;
	else
	  loops := 0;
	  waittime := 1;
	endif
	ev := wait_for_event(waittime);
	case (ev.type)
      SYSEVENT_DAMAGED:
	  SYSEVENT_ENGAGED: if(ev.source)
			              if(RandomInt(6)==1)
					        opponent := ev.source;
			  		        SetOpponent(opponent);
					        TurnToward(opponent);
			              endif
			            endif
	endcase
  endwhile
  post_combat();
endfunction

function EnableCombatEvents()
  EnableEvents( SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + EVID_PEACEMADE );
endfunction

function DisableCombatEvents()
  DisableEvents( SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + EVID_PEACEMADE );
endfunction

function look_around()
  var him, dista;
  var dis := 20;
  foreach critter in ListMobilesInLineOfSight(me, HALT_THRESHOLD)
    dista := Distance(me, critter);
    if(dista < dis)
      if((critter.npctemplate != "bladespirit") && (critter.npctemplate != "vortex"))
        him := critter;
        dis := dista;
      endif
    endif
  endforeach
  if(him)
    Fight(him);
  endif
endfunction

function EnableMainEvents()
 DisableEvents( SYSEVENT_SPEECH + SYSEVENT_LEFTAREA + SYSEVENT_DISENGAGED + SYSEVENT_OPPONENT_MOVED );
 EnableEvents( SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + SYSEVENT_ENTEREDAREA, HALT_THRESHOLD );
endfunction

function DisableMainEvents()
  DisableEvents( SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + SYSEVENT_ENTEREDAREA);
endfunction

function HerdingLoop(ev)
  var holder := ev.data;
  var lx := holder[1];
  var ly := holder[2];
  var loops := 0;
  var opponent;
  waittime := 0;
  while(1)
	if(!CloseIn(me, lx, ly))
	  loops := loops + 1;
	  waittime := 0;
	else
	  loops := 0;
	  waittime := 1;
	endif
	if((loops >= 30) or (coordist(me.x, me.y, lx, ly) <= 1))
	  break;
	endif
	ev := wait_for_event(waittime);
	case (ev.type)
      SYSEVENT_DAMAGED: opponent := ev.source;
			  		    SetOpponent(opponent);
					    TurnToward(opponent);
	  SYSEVENT_ENGAGED: opponent := ev.source;
			  		    SetOpponent(opponent);
					    TurnToward(opponent);
	endcase
  endwhile
  Return;
endfunction

function CloseIn(me, lx, ly)
  case (coordist(me.x, me.y, lx, ly))
    0:       return 1;
    default: WalkTowardLocation(lx, ly);
             return 0;
  endcase
endfunction
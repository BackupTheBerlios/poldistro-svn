use npc;
use os;
use uo;
use cfgfile;

include "include/eventID";
include "include/attributes";
include "include/sysEvent";
include ":npcutils:randName";
include ":npcutils:NPCUtil";
include "include/objtype";
include ":npcutils:anchors";
include "include/dist";
include ":oldAI:main/setup";
include ":oldAI:main/sleepMode";
include ":npcutils:animal";


const HALT_THRESHOLD := 10;
var npccfgfile := ReadConfigFile("::npcdesc");
var idlesnd1 := CInt(npccfgfile[me.npctemplate].idlesound1);
var idlesnd2 := CInt(npccfgfile[me.npctemplate].idlesound2);
var masterserial := GetObjProperty(me, "master");

program KillPlayers()
  var master;
  foreach char in EnumerateOnlineCharacters()
    if(char.serial == masterserial)
      master := char;
      break;
    endif
  endforeach
  if(!master)
    master := SystemFindObjectBySerial(CInt(masterserial), SYSFIND_SEARCH_OFFLINE_MOBILES);
  endif
  SetScriptController( master );
  drop_anchor();
  EnableEvents(SYSEVENT_ENGAGED);
  EnableEvents(SYSEVENT_DISENGAGED);
  EnableEvents(SYSEVENT_DAMAGED);
  EnableEvents(SYSEVENT_ENTEREDAREA + SYSEVENT_LEFTAREA, HALT_THRESHOLD);
  EnableEvents(SYSEVENT_OPPONENT_MOVED);
  SetWarMode(0);
  if(GetObjProperty(me, "frozen"))
	me.frozen := 1;
  endif
  main_AI_loop();
endprogram

function main_AI_loop()
  var ev;
  var wanders := 0;
  EnableMainEvents();
  look_around();
  while (1)
    ev := os::wait_for_event(5);
	if(wanders > 60)
	  wanders :=0;
	  ev := sleepmode();
	endif
	if(ev)
	  repeat
	    case(ev.type)
          SYSEVENT_ENTEREDAREA:
          SYSEVENT_ENGAGED:
          SYSEVENT_DAMAGED:     Fight(ev.source);
	    endcase
      until (! (ev := os::wait_for_event(1)) );
    endif
    look_around();
    wander();
	wanders := wanders +1;
  endwhile
endfunction

function process_noncombat_event(ev)
  case (ev.type)
    default: return;
  endcase
endfunction

function Fight(opponent)
  if((opponent.cmdlevel > 0) || (opponent == me))
    SetWarMode(0);
    opponent := 0;
	return;
  endif
  var oldprio := set_priority(50);
  SetOpponent(opponent);
  prepare_for_fight(opponent);
  var loops := 0;
  var ev;
  var waittime := 0;
  while((opponent) && not (opponent.dead || opponent.hidden || opponent.concealed) && (dist(me,opponent) < 20) )
	if(!CloseDistance(opponent))
	  loops := loops + 1;
	  waittime := 0;
	else
	  loops := 0;
	  waittime := 2;
	endif
	in_combat_event_loop(opponent, loops);
	ev := wait_for_event(waittime);
	case (ev.type)
      SYSEVENT_DAMAGED:
	  SYSEVENT_ENGAGED: if(ev.source)
			              if(RandomInt(6)==1)
					        opponent := ev.source;
			  		        SetOpponent(opponent);
					        TurnToward(opponent);
			              endif
			            endif
      EVID_PEACEMADE:   SetWarMode(0);
			            SetOpponent(0);
			            sleep(1);
                        look_around();
			            return;
	endcase
  endwhile
  post_combat();
endfunction

function prepare_for_fight(opponent)
  DisableMainEvents();
  EnableCombatEvents();
endfunction

function in_combat_event_loop(opponent, loops)
  if(Distance(me,opponent) < 2)
    var dmg := RandomInt(CInt(GetStrength(opponent) / 25));
    dmg := dmg * 2;
    if(dmg > 24)
      dmg := 12;
    elseif(dmg < 2)
      dmg := 2;
    endif
	ApplyRawDamage(opponent, RandomInt(dmg));
  endif
endfunction

function CloseDistance(opponent)
  case (Distance(me, opponent))
    1:
    0:       return 1;
    default: RunToward( opponent );
		     sleepms(100);
             return 0;
  endcase
endfunction

function post_combat()
  DisableCombatEvents();
  EnableMainEvents();
  SetWarMode( 0 );
  SetOpponent( 0 );
  sleep(1);
  look_around();
endfunction

function EnableMainEvents()
  DisableEvents( SYSEVENT_SPEECH + EVID_LEFTAREA + EVID_DISENGAGED + EVID_OPPONENT_MOVED );
  EnableEvents( EVID_ENGAGED + EVID_DAMAGED + EVID_ENTEREDAREA, HALT_THRESHOLD );
endfunction

function DisableMainEvents()
  DisableEvents( EVID_ENGAGED + EVID_DAMAGED + EVID_ENTEREDAREA);
endfunction

function EnableCombatEvents()
  EnableEvents(SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + EVID_PEACEMADE);
endfunction

function DisableCombatEvents()
  DisableEvents(SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + EVID_PEACEMADE);
endfunction

function look_around()
  var him, dista;
  var dis := 20;
  foreach critter in ListMobilesInLineOfSight(me, HALT_THRESHOLD)
    dista := Distance(me, critter);
    if(dista < dis)
      if((critter.npctemplate != "bladespirit") && (critter.npctemplate != "vortex"))
        him := critter;
        dis := dista;
      endif
    endif
  endforeach
  if(him)
    Fight(him);
  endif
endfunction

function herding(ev)
  var holder := ev.data;
  var lx := holder[1];
  var ly := holder[2];
  var loops := 0;
  var opponent;
  var waittime := 0;
  while(1)
	if(!CloseIn(me, lx, ly))
	  loops := loops + 1;
	  waittime := 0;
	else
	  loops := 0;
	  waittime := 1;
	endif
	if((loops >= 30) or (coordist(me.x, me.y, lx, ly) <= 1))
	  break;
	endif
	ev := wait_for_event(waittime);
	case (ev.type)
      SYSEVENT_DAMAGED: opponent := ev.source;
			  		    SetOpponent(opponent);
					    TurnToward(opponent);
	  SYSEVENT_ENGAGED: opponent := ev.source;
			  		    SetOpponent(opponent);
					    TurnToward(opponent);
	endcase
  endwhile
  Return;
endfunction

function CloseIn(me, lx, ly)
  case (coordist(me.x, me.y, lx, ly))
    0:       return 1;
    default: WalkTowardLocation(lx, ly);
             return 0;
  endcase
endfunction
use npc;
use os;
use uo;
use cfgfile;

include "include/eventID";
include "include/sysEvent";
include ":npcutils:names";
include ":npcutils:NPCUtil";
include ":itemutils:objtype";
include ":npcutils:speech";
include ":npcutils:NPCCast";
include ":npcutils:anchors";
include ":oldAI:main/mainLoopGood";
include ":oldAI:combat/fight";
include ":oldAI:combat/spellCombatEvent";
include ":oldAI:setup/setup";
include ":oldAI:main/loot";
include ":oldAI:main/sleepMode";
include ":begging:begging";

const HALT_THRESHOLD := 10; // how close before he attacks?
var LAST_BREATH := ReadGameClock();

var npccfgfile := ReadConfigFile( "::npcdesc" );
var idlesnd1 := CInt(npccfgfile[me.npctemplate].idlesound1);
var idlesnd2 := CInt(npccfgfile[me.npctemplate].idlesound2);
var waittime := 0;
var ev := 0;

program KillPlayers()
  SetWarMode( 0 );
  if(GetObjProperty(me, "frozen"))
	me.frozen := 1;
  endif
  main_AI_loop(ReadGameClock() + 10);
endprogram

function CloseDistance( opponent )
  case (Distance( me, opponent ))
    1:              // the most likely, so first
    0:       return 1;
    default: RunToward( opponent );
             return 0;
  endcase
endfunction

function HerdingLoop(ev)
  var holder := ev.data;
  var lx := holder[1];
  var ly := holder[2];
  var loops := 0;
  var opponent;
  waittime := 0;
  while(1)
	if(!CloseIn(me, lx, ly))
	  loops := loops + 1;
	  waittime := 0;
	else
	  loops := 0;
	  waittime := 1;
	endif
	if((loops >= 30) or (CoordinateDistance(me.x, me.y, lx, ly) <= 1))
	  break;
	endif
	ev := wait_for_event(waittime);
	case (ev.type)
      SYSEVENT_DAMAGED: opponent := ev.source;
			  		    SetOpponent(opponent);
					    TurnToward(opponent);
	  SYSEVENT_ENGAGED: opponent := ev.source;
			  		    SetOpponent(opponent);
					    TurnToward(opponent);
	endcase
  endwhile
  Return;
endfunction

function CloseIn(me, lx, ly)
  case (CoordinateDistance(me.x, me.y, lx, ly))
    0:       return 1;
    default: WalkTowardLocation(lx, ly);
             return 0;
  endcase
endfunction
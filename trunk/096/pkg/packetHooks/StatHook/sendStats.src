/* $Id$
 *
 */
////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  name:    Send Stats Packet Hook
//  version: 1.0a
//  author:  MuadDib
//
//  Purpose:  This hooks the core 0x11 stats packet, and rewrites it for sending the char all the
//            extended stats for Age of Shadows like Pet Count, Min/Max Damage, statcap, etc. 2
//            Flags used per a CONST in order to decide which of the type to send.
//
//  Notes:    This is done only for example functionality. Pet Count, Damage Reports, etc is NOT
//            implemented into anything nor is the resists and luck. You can also change the global
//            var STATCAP to be a variable if required for special rising stat cap systems.
//
// Const settings:
// BIT_MASK  = 0x00000003 DO NOT CHANGE!
//
// Global Variables:
// STATCAP = Set this to your shard's Stat Cap. If based on age, race, etc, just add a function
//           at the beginning of the exported function to check and set the statcap variable.
//
///////////////////////////////////////////////////////////////////////////////////////////////
use polsys;

include ":attributes:attributeConstants";
include ":attributes:attributes";
include ":config:config";

program sendStats()
	Print( "INSTALLING: Outgoing Status PH..." );
	return 1;
endprogram

CONST BIT_MASK := 0x00000003;

var STATCAP := 225;
var MODE    := 0;
var STATLOCK:= 0;

exported function HandleSendStats( character, byref packet )
	var enabled := QueryConfigInt("Enabled", ":packetconfig:config/packetconfig", "StatusBar");
	if( !enabled )
		return 0;
	endif
	MODE := QueryConfigInt("Mode", ":packetconfig:config/packetconfig", "StatusBar");
	STATLOCK := QueryConfigInt("Statlock", ":packetconfig:config/packetconfig", "StatusBar");

	// Easiest method to decide which way to handle the packet. We could do this based on
	// a Client version check too, but that would not be recommended since versions can be
	// spoofed with software.
	case(MODE)
		0: return 0;
		3: HandleStatPet(character, packet); if( STATLOCK ) SendStatLock(character); endif
		4: HandleExtended(character, packet); if( STATLOCK ) SendStatLock(character); endif
		default: return 0;
	endcase

	return 0;
endfunction

// If (MODE == 3)
//   BYTE[2]  statcap
//   BYTE pets current
//   BYTE pets max
// Total increase in size, 4.
// Increase Packet Size, change the MODE in the packet string, and add the information.
// Position 42 (0 Indexed) is for the MODE. If MODE in packet is already 01, sending the
// Stat info etc, then do this, otherwise simply ignore.
function HandleStatPet(character, byref packet)

	// Increase by 4 for the new info to be added
	packet.SetSize(((packet.GetSize())+4));
	// We do this to make sure it is the correct packet form. Otherwise it is for someone else
	// and there is no need to send the additional info.
	var packet_mode := packet.GetInt8(42);
	var chk := 0;
	case(packet_mode)
		0: return;    // Base packet, so not needed
		1: chk := 1;  // Ok, let's continue processing this
		3: return 0;    // In case we messed up, do nothing
		4: return 0;    // In case we messed up, do nothing
		default: return 0;   // OHHHH, mommy :o
	endcase

	if( chk )
		// I do not recommend pet count stuff. Should just change code
		// to always send 0 for them, useless unless you have some form
		// of Pet control system on your shard.

		// We use the #temp cprop type, because if you implement pet counts on
		// worldly existing (not stabled) pets, then you should always double check
		// at logon/reconnect, and logoff. Would be wise to also set it in the tamed ai
		// script too when they go tamed, and when they disband. It may even be advisable
		// to use a cprop that is a Struct. Using the serials of each pet, and just counting
		// the struct. OHHHHHH the options.
		var petcnt := GetObjProperty(character, "#PetCount");
		if( !petcnt )
			petcnt := 0;
		endif
		// Change this to your liking. This is what decides how many pets they can have
		// at one time unstabled.
		var petmax := AP_GetSkill(character, ANIMAL_TAMING)/15;
		// May want higher, if you have horses and llamas counting as more than 1. That way they
		// can always at least have a horse or llama.
		if( !petmax )
			petmax := 1;
		endif
		// Sets the packet to MODE 3
		packet.SetInt8(42, 3);
		// Done this way due to reverse padding expected by the client
		// Due to some backward settings, this check is required to set the Statcap
		// in the packet.
		if( STATCAP <= 255 )
		// Set the STATCAP in the packet
			packet.SetInt8(67, STATCAP);
		else
			// Set the STATCAP in the packet
			packet.SetInt16(66, STATCAP);
		endif
		// Sets their current pet count
		packet.SetInt8(68, petcnt);
		// Sets their current pet max count based on taming
		packet.SetInt8(69, petmax);
	endif

	return 0;
endfunction


//  If (MODE==4 )
//    BYTE[2]  statcap
//    BYTE     pets current
//    BYTE     pets max
//    BYTE[2]  fireresist
//    BYTE[2]  coldresist
//    BYTE[2]  poisonresist
//    BYTE[2]  energyresist
//    BYTE[2]  luck
//    BYTE[2]  damage max
//    BYTE[2]  damage min
//    BYTE[4]  titching points
function HandleExtended(character, byref packet)
	// Increase by 22 for the new info to be added
	packet.SetSize(((packet.GetSize())+22));
	// We do this to make sure it is the correct packet form. Otherwise it is for someone else
	// and there is no need to send the additional info.
	var packet_mode := packet.GetInt8(42);
	var chk := 0;
	case(packet_mode)
		0: return 0;    // Base packet, so not needed
		1: chk := 1;  // Ok, let's continue processing this
		3: return 0;    // In case we messed up, do nothing
		4: return 0;    // In case we messed up, do nothing
		default: return 0;   // OHHHH, mommy :o
	endcase

	if(chk)
		// I do not recommend pet count stuff. Should just change code
		// to always send 0 for them, useless unless you have some form
		// of Pet control system on your shard.

		// We use the #temp cprop type, because if you implement pet counts on
		// worldly existing (not stabled) pets, then you should always double check
		// at logon/reconnect, and logoff. Would be wise to also set it in the tamed ai
		// script too when they go tamed, and when they disband. It may even be advisable
		// to use a cprop that is a Struct. Using the serials of each pet, and just counting
		// the struct. OHHHHHH the options.
		var petcnt := GetObjProperty(character, "#PetCount");
		if( !petcnt )
			petcnt := 0;
		endif
		// Change this to your liking. This is what decides how many pets they can have
		// at one time unstabled.
		var petmax := AP_GetSkill(character, ANIMAL_TAMING)/15;
		// May want higher, if you have horses and llamas counting as more than 1. That way they
		// can always at least have a horse or llama.
		if( !petmax )
			petmax := 1;
		endif
		// Sets it to MODE 4
		packet.SetInt8(42, 4);
		// Done this way due to reverse padding expected by the client
		// Due to some backward settings, this check is required to set the Statcap
		// in the packet.
		if( STATCAP <= 255 )
			// Set the STATCAP in the packet
			packet.SetInt8(67, STATCAP);
		else
			// Set the STATCAP in the packet
			packet.SetInt16(66, STATCAP);
		endif
		// Sets their current pet count in packet
		packet.SetInt8(68, petcnt);
		// Sets their current pet max count based on taming in packet
		packet.SetInt8(69, petmax);

		// These SHOULD be 1 lower for position, and using 16 not 8, but it does it wrong with core >:(
		// Tithing should be a 32, position 84 also. SetInt16 will not pad the packet correctly is why.
		// Instead of SetInt16(70, 5) making it 0005, it makes it 0500 if I remember right. BOOOOO

		// Be sure to make your own functions for these. But since they are NOT used with Distro, will
		// just have the core set them to 0 for it all.
		// NOTE**** Just like the statcap, if it is over 255, have the if check statcap uses!!
		packet.SetInt8(71, 0);  // Set the fireresist in the packet
		packet.SetInt8(73, 0);  // Set the coldresist in the packet
		packet.SetInt8(75, 0);  // Set the poisonresist in the packet
		packet.SetInt8(77, 0);  // Set the energyresist in the packet
		packet.SetInt8(79, 0);  // Set the luck in the packet
		packet.SetInt8(87, 0);  // Set the tithing points in the packet

		// Now let's set up the Max and Min damage entries of the packet.

		// Get the weapons they are holding if any.
		var weaponone := GetEquipmentByLayer (character, 0x01);
		var weapontwo := GetEquipmentByLayer (character, 0x02);
		// Set the max and min to that of the wrestling (change if you changed your
		// wrestle intrinsic in the combat package)
		var maxdmg := 8, mindmg := 1;
		// Let's make sure the items in hand are weapons and process them correctly.
		if( weaponone.isA(POLCLASS_WEAPON) )
			var cfg := ReadConfigFile(":*:itemdesc");
			// Read the settings from the config file, and add the mods.
			mindmg := CInt(cfg[weaponone.objtype].MinDam) + weaponone.dmg_mod;
			maxdmg := CInt(cfg[weaponone.objtype].MaxDam) + weaponone.dmg_mod;
		elseif( weapontwo.isA(POLCLASS_WEAPON) )
			var cfg := ReadConfigFile(":*:itemdesc");
			// Read the settings from the config file, and add the mods.
			mindmg := CInt(cfg[weapontwo.objtype].MinDam) + weaponone.dmg_mod;
			maxdmg := CInt(cfg[weapontwo.objtype].MaxDam) + weaponone.dmg_mod;
		endif
		// Set the min damage in the packet
		packet.SetInt8(81, mindmg);
		// Set the max damage in the packet
		packet.SetInt8(83, maxdmg);
	endif

	return 0;
endfunction


//  Packet 0xBF
//  General Info (5 bytes, plus specific message)
//    BYTE[1]     cmd
//    BYTE[2]     len
//    BYTE[2]     subcmd
//    BYTE[len-5] submessage
//
//  Subcommand: 0x19: Extended stats
//    BYTE[1] type - always 2 ? never seen other value
//    BYTE[4] serial
//    BYTE[1] unknown - always 0. why?
//    BYTE[1] lockBits - Bits: XXSS DDII (s=strength, d=dex, i=int), 0 = up, 1 = down, 2 = locked
// Bits explanation and help from Folko, since I knew zero about working with the bit
// format the packet requires. lsh function by folko since EScript lacks the >> and << abilities.
// For this to work correctly, You will also need a hook for the 0xBF packet and the 0x19 Sub to
// accept the state changes of the locks.
function SendStatLock(character)
	if( CInt(character.clientversion[1]) < 3 )
		return 0;
	endif
	// Let's create the new packet to send them. This is to send the command that will make the
	// locks show up on the status bar. Even though the packet is variable length, the command we
	// are sending is always 12, so let's just make it that length to shorten the code.
	var newpacket := CreatePacket(0xBF, 12);
	// Sets the length of the packet.
	newpacket.SetInt8(2, 0x0C);
	// Subcmd for the packet
	newpacket.SetInt8(4, 0x19);
	// 02 - Is always this, never changes
	newpacket.setInt8(5, 2);
	// The person's Serial gets added also.
	newpacket.setInt32(6, (character.serial));
	// Now let's read off the stat lock cprop and set those in the packet
	var statBit := GetObjProperty( character, "%StatLock%" );
	// If it doesn't exist, it makes the bit 0, means nothing locked or down.
	// Then records it on the player.
	if( (statbit.errortext) )
		statBit := 0;
		SetObjProperty(character, "%StatLock%", statBit);
	endif

	// Inserts the stat lock states into the packet, which are stored on the character
	// already converted to Bit form, see the NewCommand pkg for info.
	newpacket.setInt16(10, statBit);
	// Sends the new packet to the character.
	newpacket.SendPacket(character);

	return 1;
endfunction

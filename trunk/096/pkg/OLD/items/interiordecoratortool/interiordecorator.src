/* $Id: interiordecorator.src 664 2005-10-27 03:36:13Z muaddiblsd $
 *
 */
use uo;
use os;

include ":gumps:gumps";
include ":gumps:gumps_ex";
include "include/client";

CONST CMD_LEVEL_OVERRIDE := 2;

program use_interiorDecorator(who, theDecorator)

	var doMultiCheck := !(who.cmdlevel >= CMD_LEVEL_OVERRIDE);
	var theManipulation := GetObjProperty(theDecorator, "Manipulation");
	var theTarget;
	var origLoc := {};

	if (theManipulation == error)
		ChangeManipulation(who, theDecorator, theManipulation);
		return 1;
	endif

	SendSysMessage(who, "What do you want to manipulate?");
	theTarget := Target(who, TGTOPT_NOCHECK_LOS);

	if ((theTarget == error) || (!theTarget) || (!theTarget.isA(POLCLASS_ITEM)) )
		SendSysMessage(who, "Cancelled.");
		return 0;
	endif

	if (theTarget.serial == theDecorator.serial)
		ChangeManipulation(who, theDecorator, theManipulation);
		return 0;
	endif

	if (doMultiCheck)
		if (who.multi == error)
			SendSysMessage(who, "You aren't in a house!");
			return 0;
		endif
		if (!inOwnedMulti(who, theTarget))
			SendSysMessage(who, "That isn't in something you own!");
			return 0;
		endif
	endif

	if (theTarget.movable == 1)
		SendSysMessage(who, "Target not locked down!");
		return 0;
	endif

	origLoc := {theTarget.x, theTarget.y, theTarget.z};

	DoManipulation(who, theDecorator, theTarget);

	if (doMultiCheck)
		if (who.multi == error)
			SendSysMessage(who, "You aren't in a house!");
			theTarget.movable := 1;
			MoveItemToLocation(theTarget, origLoc[1], origLoc[2], origLoc[3], MOVEITEM_FORCELOCATION);
			theTarget.movable := 0;
			return 1;
		endif
		if (!inOwnedMulti(who, theTarget))
			SendSysMessage(who, "That isn't in something you own!");
			theTarget.movable := 1;
			MoveItemToLocation(theTarget, origLoc[1], origLoc[2], origLoc[3], MOVEITEM_FORCELOCATION);
			theTarget.movable := 0;
			return 1;
		endif
	endif

endprogram


function DoManipulation(who, theDecorator, theTarget)

	var theManipulation := CInt(GetObjProperty(theDecorator, "Manipulation"));

	if (theManipulation == error)
		SendSysMessage(who, "Must set decorator first.");
		return 0;
	endif

	theTarget.movable := 1;

	case (theManipulation)
		// UP
		1:	if ((theTarget.z+1) > (who.z+20))
				SendSysMessage(who, "Can't move that high.");
				theTarget.movable := 0;
				return 0;
			endif
			MoveItemToLocation(theTarget, theTarget.x, theTarget.y, theTarget.z+1, MOVEITEM_FORCELOCATION);
		// DOWN
		2:	if ((theTarget.z-1) < (who.z-5))
				SendSysMessage(who, "Can't move that low.");
				theTarget.movable := 0;
				return 0;
			endif
			MoveItemToLocation(theTarget, theTarget.x, theTarget.y, theTarget.z-1, MOVEITEM_FORCELOCATION);
		// NORTH
		3:	MoveItemToLocation(theTarget, theTarget.x, theTarget.y-1, theTarget.z, MOVEITEM_FORCELOCATION);
		// SOUTH
		4: MoveItemToLocation(theTarget, theTarget.x, theTarget.y+1, theTarget.z, MOVEITEM_FORCELOCATION);
		// WEST
		5: MoveItemToLocation(theTarget, theTarget.x-1, theTarget.y, theTarget.z, MOVEITEM_FORCELOCATION);
		// EAST
		6: MoveItemToLocation(theTarget, theTarget.x+1, theTarget.y, theTarget.z, MOVEITEM_FORCELOCATION);
		// FLIP
		7: DoFlip(who, theTarget);
	endcase

	theTarget.movable := 0;

	return 1;

endfunction

function DoFlip(who, theItem)

	start_script( ":commands:player/flip", {who, theItem});
	return 1;

endfunction

function ChangeManipulation(who, theDecorator, currManipulation)


	var BKGND_SILVERTRIM := GFCfgConst("Defaults", "BackGround");
	var BKGND_DARK_STONE := GFCfgConst("Defaults", "ForeGround");

	var theCancelButton;
	var theOkButton;
	var retKey;
	var theRadioButtons := array;
	var i;

	var gump := GFCreateGump(125, 125);
	GFResizePic(gump, 0, 0, BKGND_SILVERTRIM, 300, 200);
	GFResizePic(gump, 15, 15, BKGND_DARK_STONE, 270, 35);
	GFTextLine(gump,  75, 20, 2100, "Interior Decorator Menu");
        GFResizePic(gump, 15, 55, BKGND_DARK_STONE, 130, 130);
        GFResizePic(gump, 155, 55, BKGND_DARK_STONE, 130, 130);

	theRadioButtons[1] := GFRadioButton(gump, 50, 75, 0x2342, 0x2343, currManipulation == 1);
	GFTextLine(gump, 75, 75, 2100, "Up");
	theRadioButtons[2] := GFRadioButton(gump, 50, 100, 0x2342, 0x2343, currManipulation == 2);
	GFTextLine(gump, 75, 100, 2100, "Down");

	GFGumpPic(gump, 200, 95, 0x9E1);

	theRadioButtons[3] := GFRadioButton(gump, 213, 70, 0x2342, 0x2343, currManipulation == 3);
	theRadioButtons[4] := GFRadioButton(gump, 213, 150, 0x2342, 0x2343, currManipulation == 4);
	theRadioButtons[5] := GFRadioButton(gump, 175, 114, 0x2342, 0x2343, currManipulation == 5);
	theRadioButtons[6] := GFRadioButton(gump, 250, 114, 0x2342, 0x2343, currManipulation == 6);

	theRadiobuttons[7] := GFRadioButton(gump, 50,  125, 0x2342, 0x2343, currManipulation == 7);
	GFTextLine(gump, 75, 125, 2100, "Turn");



	theCancelButton := GFAddButton(gump, 55, 155, 0xFB4, 0xFB6, GF_CLOSE_BTN, 9998);
	theOkButton := GFAddButton(gump, 25, 155, 0xFB7, 0xFB9, GF_CLOSE_BTN, 9999);

	retKey := GFSendGump(who, gump);

	if( retKey[0] == 9999 )
		for (i:=1; i<=7; i:=i+1)
			if (retKey[theRadioButtons[i]] == 1)
				break;
			endif
		endfor
		if ((i <= 7) && (i>0))
			SetObjProperty(theDecorator, "Manipulation", i);
		endif
	endif

	return 1;

endfunction


function inOwnedMulti(who, theItem)

	var theHouse := theItem.multi;
	var theSign := GetHouseSign(theHouse);

	if (theSign == error)
		SendSysMessage(who, "Can't find house sign!");
		return 0;
	endif

	if (!isCoOwner(who, theHouse))
		SendSysMessage(who, "You aren't a co-owner here.");
		return 0;
	endif

	return 1;

endfunction


function isCoOwner(who, house)

	var ownerAcct := GetObjProperty(house, "owneracct");
	var coOwnList := GetObjProperty(house, "coownlist");

	if (who.acctname == ownerAcct)
		return 1;
	endif

	if (who.serial in coOwnList)
		return 1;
	endif

	return 0;

endfunction

function GetHouseSign(theMulti)

	var components := theMulti.components;

	foreach component in components
		case (component.objtype)
			0xbcf:
			0xbd0:
			0xbd1:
			0xbd2: return component;
		endcase
	endforeach

	return error;

endfunction


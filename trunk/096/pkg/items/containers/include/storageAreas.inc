// $Id$

use uo;
use os;
use polsys;

/////////////////////////////////////////////////////////////////
// * Function List *
//
// DestroyBox(mobile, storage_area_name)
// GetStorageAreaContainer(mobile, storage_area_name:=0)
// GetStorageAreaNames()
// RegisterStorageArea(storage_area_name)
// StorageContainerExists(mobile, storage_area_name)
// StorageDebugMsg(text)
//
/////////////////////////////////////////////////////////////////
// * Internal/Private Function List *
//
/////////////////////////////////////////////////////////////////
// * Global Variables *
const CP_NOCREATE	:= 0x0;
const CP_CREATE		:= 0x1;

const CP_DEFAULT_AREA	:= "World Bank";

/* 
 * Set the 'box_type' variable to the object name of the container type
 * you want to be used for bank box. 
 * Example: "pouch" "metalchest" "barrel"
 *
 * This is ONLY used when a new root container is created. It can be changed on
 * the fly inside of a script for when you want to use specific container
 * types for special storage areas. 
 
 * Ideally, you should make an object type with the name 'BankBox' to better
 * control the number of items that can be put in the storage container.
 */
var container_type	:= "BankBox";

//Toggles the bank related debug messages on and off.
var STORAGE_DEBUG	:= 1;
//
/////////////////////////////////////////////////////////////////


/*
 * GetStorageAreaContainer(mobile, storage_area_name, create)
 *
 * Purpose
 *
 * Parameters
 * mobile:	Owner of the container that will be opened (uses .serial of it)
 * storage_area_name:	Name of the storage area to retrieve the container from.
 *
 * Return Value
 * A storage area container reference
 *
 */
function GetStorageAreaContainer(mobile, storage_area_name:=0, create:=CP_NOCREATE)
	if ( (!storage_area_name) || (storage_area_name == error) )
		storage_area_name := CP_DEFAULT_AREA;
	endif
	
	CP_RegisterStorageArea(storage_area_name);

	var root_container := CP_GetStorageContainer(Hex(mobile.serial), storage_area_name);
	if ( !root_container && create )
		root_container := CP_CreateStorageAreaContainer(Hex(mobile.serial), storage_area_name);
	endif
	
	return root_container;
endfunction

/*
 * CP_GetStorageContainer(container_name, storage_area_name)
 *
 * Purpose
 *
 * Parameters
 *
 * Return value
 *
 */
function CP_GetStorageContainer(container_id, storage_area_name:=0)
	if ( (!storage_area_name) || (storage_area_name == error) )
		storage_area_name := CP_DEFAULT_AREA;
	endif
	var storage_area := FindStorageArea(storage_area_name);
	
	var container_name := "[Root Container] " + container_id;
	var root_container := FindRootItemInStorageArea(storage_area, container_name);
	if ( !root_container )
		//Old distro (pre 096) root container names.
		container_name := "Bankbox of "+container_name;
		root_container := FindRootItemInStorageArea(storage_area, container_name);
		//Set the name to the new style
		container_name["Bankbox of "] := "";
		container_name := "[Root Container] "+Hex(CInt(container_name));
	endif
	
	return root_container;
endfunction

/*
 * CP_CreateStorageAreaContainer(container_id, storage_area_name)
 *
 * Purpose
 *
 * Parameters
 *
 * Return value
 *
 */
function CP_CreateStorageAreaContainer(container_id, storage_area_name:=0)
	if ( (!storage_area_name) || (storage_area_name == error) )
		storage_area_name := CP_DEFAULT_AREA;
	endif
	
	var storage_area := FindStorageArea(storage_area_name);
	if ( !storage_area )
		// The storage area does not exist - so create it.
		CreateStorageArea(storage_area_name);
		storage_area := FindStorageArea(storage_area_name);
	endif
	
	var container_name := "[Root Container] " + container_id;
	
	var result := CreateRootItemInStorageArea(storage_area, container_name, container_type);
	if ( result.errortext )
		return result;
	endif
		
	return FindRootItemInStorageArea(storage_area_name, container_name);
endfunction

/*
 * CP_RemoveStorageAreaContainer(container_id, storage_area_name)
 *
 * Purpose
 *
 * Parameters
 *
 * Return value
 *
 */
function CP_RemoveStorageAreaContainer(container_id, storage_area_name)
	if ( (!storage_area_name) || (storage_area_name == error) )
		storage_area_name := CP_DEFAULT_AREA;
	endif

	var storage_area := FindStorageArea(storage_area_name);
	var container_name := "[Root Container] " + container_id;

	CP_StorageDebugMsg("Removed root container. Storage area: [" + storage_area_name + "] ID: [" + container_id + "]");

	return DestroyRootItemInStorageArea(storage_area, container_name);
endfunction

/*
 * CP_RegisterStorageArea(storage_area_name)
 *
 * Purpose
 *
 * Parameters
 *
 * Return value
 *
 */
function CP_RegisterStorageArea(storage_area_name)
	if ( (!storage_area_name) || (storage_area_name == error) )
		return error{"errortext":="Not a valid storage area name"};
	endif

	set_critical(1);
	var all_areas := GetGlobalProperty("StorageAreaNames");
	if ( !all_areas.Exists(storage_area_name) )
		CP_StorageDebugMsg("Registering bank " + storage_area_name);
		all_areas.Insert(storage_area_name, 0);
		SetGlobalProperty("StorageAreaNames", all_areas);
	endif
	set_critical(0);
	
	return 1;
endfunction

/*
 * CP_StorageDebugMsg(text)
 *
 * Purpose
 *
 * Parameters
 *
 * Return value
 *
 */
function CP_StorageDebugMsg(text)
	if ( STORAGE_DEBUG )
		SysLog(text);
	endif
	
	return 1;
endfunction

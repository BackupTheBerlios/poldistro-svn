use uo;
use os;

include "include/canAccess";

program on_insert(who, book, movetype, inserttype, item, existing_stack, amt);

  var vendorserial := GetObjProperty(book,"Vendor");
  if(vendorserial)
    SendSysMessage(who, "You cannot insert runes while that is on a vendor.");
    MoveItemToContainer(item, who.backpack);
    return;
  endif
  if(book.movable == 0)
    SendSysMessage(who, "You cannot do that while the book is locked down.");
    MoveItemToContainer(item, who.backpack);
    return 0;
  elseif (!can_access(who, book) || !can_access(who, item))
    MoveItemToContainer(item, who.backpack);
    SendSysMessage(who, "You can't add that when the book is in use.");
    return;
  else
    if(item.objtype == 0x1f14)
      AddRune(who, book, item);
    elseif(item.objtype == 0x1f4c);
      rechargebook(who, book, item);
    else
      SendSysMessage(who, "You can't put that in a runebook.");
      MoveItemToContainer(item, who.backpack);
    endif
  endif
endprogram

function rechargebook(who, book, scrolls)
  var charges    := CInt(GetObjProperty(book, "charges"));
  var maxcharges := CInt(GetObjProperty(book, "maxcharges"));
  var maxamount  := CInt(maxcharges - charges);
  var amount     := CInt(scrolls.amount);
  if(maxamount <= 0)
      SendSysMessage(who, "This runebook is full.");
      MoveItemToContainer(scrolls, who.backpack);
      return;
  elseif(amount >= maxamount)
      var to_substract := maxamount;
      if(SubtractAmount(scrolls, to_substract))
          charges := maxcharges;
      endif
  elseif(DestroyItem(scrolls))
      charges := charges + amount;
  endif
  if(scrolls && scrolls.amount)
    MoveItemToContainer(scrolls, who.backpack);
  endif
  PlaySoundEffect(who, 0x1f1);
  PlayObjectCenteredEffect(who, 0x375a, 7, 0x10);
  SetObjProperty(book, "charges", charges);
  SendSysMessage(who, "There's now " + charges + " charges in this runebook.");
  UpdateName(book, charges);
endfunction

function AddRune(who, book, rune)
  var runedefs := GetObjProperty(book, "runedefs");
  if(len(runedefs) >= 16)
    SendSysMessage(who,"This book cannot hold any more runes.");
    MoveItemToContainer(rune, who.backpack);
    return;
  endif
  if(!ReserveItem(rune))
    SendSysMessage(who,"cancelled");
    MoveItemToContainer(rune, who.backpack);
    return;
  endif
  if(!GetObjProperty(rune, "x"))
    SendSysMessage(who,"You can only add marked runes.");
    MoveItemToContainer(rune, who.backpack);
    return;
  endif
  set_critical(1);
  var x := GetObjProperty(rune, "x");
  var y := GetObjProperty(rune, "y");
  var z := GetObjProperty(rune, "z");
  var rname := rune.desc - "A recall rune for";
  var new_rune_struct := { rname, x, y, z };
  if(!runedefs)
    var new_runedefs := {new_rune_struct};
    SetObjProperty(book, "runedefs", new_runedefs);
  elseif(runedefs.size() == 32)
    SendSysMessage(who, "That rune book is full.");
    MoveItemToContainer(rune, who.backpack);
    return;
  else
    runedefs.append(new_rune_struct);
    SetObjProperty(book, "runedefs", runedefs);
  endif
  SendSysMessage(who, "You add the rune to the runebook.");
  DestroyItem(rune);
  set_critical(0);
endfunction

function UpdateName(runebook, charges)
  var name := GetObjProperty(runebook, "name");
  if(!name)
    name := "Runebook";
  endif
  runebook.name := name + " [charges: " + charges + "]";
endfunction 
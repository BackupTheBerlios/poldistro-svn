use uo;
use os;

include "include/attributes";
include "include/client";
include "include/dist";
include "include/objtype";
include "include/sound";


program dummyTraining(who, dummy)
	EraseObjProperty(who, "IsMeditating");
	EraseObjProperty(who, "HealTimer");
	if (Distance(who, dummy) > 1)
		SendSysMessage(who, "You must be standing next to that to use it.");
		return;
	endif
	var cfg := ReadConfigFile(":combat:itemdesc");
	var attribid := cfg[who.weapon.objtype]."Attribute";
	var anim := cfg[who.weapon.objtype]."Anim";
	if (GetObjProperty(dummy, "#swinging"))
		SendSysMessage(who, "That dummy is already in use.");
		return;
	endif
	var chk := 0;
	case (attribid)
		"Wrestling": CheckSwing(who, SKILLID_WRESTLING, anim, dummy);
		"Swords":    CheckSwing(who, SKILLID_SWORDSMANSHIP, anim, dummy);
		"Mace":      CheckSwing(who, SKILLID_MACEFIGHTING, anim, dummy);
		"Fencing":   CheckSwing(who, SKILLID_FENCING, anim, dummy);
		"Archery":   SendSysMessage(who, "You must use an archery butte to train archery.");
		default:     chk := 1;
	endcase
	if (chk == 1)
		SendSysMessage(who, "You cannot learn to wield that item with a training dummy.");
	endif

	return;
endprogram


function CheckSwing(who, skillid, action, dummy)
	PerformAction(who, action);
	sleepms(500);
	Detach();
	if (GetEffectiveSkill(who, skillid) >= 25.0)
		SendSysMessage(who, "You cannot learn any more from simply hitting a dummy.");
	else
		CheckSkill(who, skillid, 10, 40);
		if (GetEffectiveSkill(who, SKILLID_TACTICS) < 25)
			CheckSkill(who, SKILLID_TACTICS, 10, 20);
		endif
	endif
	PlaySoundEffect(who, SFX_13C);
	SetObjProperty(dummy, "#swinging", 1);
	if (dummy.objtype == UOBJ_TDUMMYFREEZE_NS)
		dummy.graphic := UOBJ_TDUMMYSWING_NS;
		sleepms(3600);
		dummy.graphic := UOBJ_TDUMMYFREEZE_NS;
	elseif (dummy.objtype == UOBJ_TDUMMYFREEZE_EW)
		dummy.graphic := UOBJ_TDUMMYSWING_EW;
		sleepms(3600);
		dummy.graphic := UOBJ_TDUMMYFREEZE_EW;
	endif
	EraseObjProperty(dummy, "#swinging");

	return;
endfunction
